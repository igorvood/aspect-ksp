<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="ru.vood.processor.datamodel.generator.SyntheticEntityGeneratorTest" tests="8" skipped="0" failures="7" errors="0" timestamp="2025-08-25T13:39:56.365Z" hostname="vood" time="0.024">
  <properties/>
  <testcase name="compareTestedFiles()" classname="ru.vood.processor.datamodel.generator.SyntheticEntityGeneratorTest" time="0.0"/>
  <testcase name="[1] TestCase(expectedClassFile=DealDetail)" classname="ru.vood.processor.datamodel.generator.SyntheticEntityGeneratorTest" time="0.003">
    <failure message="org.opentest4j.AssertionFailedError: expected: &lt;package ru.vood.dmgen.datamodel.sealedData&#10;&#10;import javax.`annotation`.processing.Generated&#10;import kotlin.collections.Set&#10;import kotlinx.serialization.Serializable&#10;import ru.vood.dmgen.`annotation`.ModelEntityDetail&#10;import ru.vood.dmgen.datamodel.sealedData.intf.IEntityDetail&#10;import ru.vood.dmgen.datamodel.sealedData.intf.IEntityOrigin&#10;import ru.vood.dmgen.datamodel.sealedData.metaEnum.EntityEnum&#10;import ru.vood.dmgen.datamodel.sealedData.oneOf.OneOfDtoDetail&#10;&#10;/**&#10; * Это сущность Сделка&#10; */&#10;@Generated(value = [&quot;ru.vood.processor.datamodel.generator.SyntheticEntityGenerator&quot;])&#10;@Serializable&#10;@ModelEntityDetail&#10;public data class DealDetail(&#10;  /**&#10;   * Детальная сущность, с иными сущностями имеющими на текущую внешний ключ&#10;   */&#10;  public override val origin: DealEntity,&#10;  /**&#10;   * Параметр сделки, отношение к сделке один к одному&#10;   */&#10;  public val noFKAndUk: Set&lt;NoFKAndUkDetail&gt;,&#10;  /**&#10;   * Параметр сделки, отношение к сделке один к одному, опциональный&#10;   */&#10;  public val optionalDealParam: OptionalDealParamDetail?,&#10;  /**&#10;   * Параметр сделки, отношение к сделке один к одному&#10;   */&#10;  public val oneOfDto: OneOfDtoDetail,&#10;) : IEntityDetail&lt;DealEntity&gt; {&#10;  /**&#10;   * Мета информация по сущности&#10;   */&#10;  public override val designEntityName: EntityEnum&#10;    get() = EntityEnum.Deal&#10;&#10;  /**&#10;   * Для опциональных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldOptional(entityName: EntityEnum):&#10;      IEntityDetail&lt;out IEntityOrigin&gt;? = when(entityName) {&#10;    EntityEnum.OptionalDealParam -&gt; optionalDealParam&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found optional synthetic field for entity&#10;        ${entityName}&quot;&quot;&quot;)&#10;  }&#10;&#10;  /**&#10;   * Для обязательных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldMandatory(entityName: EntityEnum):&#10;      IEntityDetail&lt;out IEntityOrigin&gt; = when(entityName) {&#10;    EntityEnum.OneOfDto -&gt; oneOfDto&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory synthetic field for entity&#10;        ${entityName}&quot;&quot;&quot;)&#10;  }&#10;&#10;  /**&#10;   * Для сущностей имеющих связь, много к одному к текущей. По имени сущности имеющей fk на текущую&#10;   * возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldSet(entityName: EntityEnum):&#10;      Set&lt;IEntityDetail&lt;out IEntityOrigin&gt;&gt; = when(entityName) {&#10;    EntityEnum.NoFKAndUk -&gt; noFKAndUk&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory Set synthetic field for&#10;        entity ${entityName}&quot;&quot;&quot;)&#10;  }&#10;}&#10;&gt; but was: &lt;package ru.vood.dmgen.datamodel.sealedData&#10;&#10;import javax.`annotation`.processing.Generated&#10;import kotlin.collections.Set&#10;import kotlinx.serialization.Serializable&#10;import ru.vood.dmgen.`annotation`.ModelEntityDetail&#10;import ru.vood.dmgen.datamodel.sealedData.oneOf.OneOfDtoDetail&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.IEntityDetail&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.IEntityOrigin&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.metaEnum.EntityEnum&#10;&#10;/**&#10; * Это сущность Сделка&#10; */&#10;@Generated(value = [&quot;ru.vood.processor.datamodel.generator.SyntheticEntityGenerator&quot;])&#10;@Serializable&#10;@ModelEntityDetail&#10;public data class DealDetail(&#10;  /**&#10;   * Детальная сущность, с иными сущностями имеющими на текущую внешний ключ&#10;   */&#10;  public override val origin: DealEntity,&#10;  /**&#10;   * Параметр сделки, отношение к сделке один к одному&#10;   */&#10;  public val noFKAndUk: Set&lt;NoFKAndUkDetail&gt;,&#10;  /**&#10;   * Параметр сделки, отношение к сделке один к одному, опциональный&#10;   */&#10;  public val optionalDealParam: OptionalDealParamDetail?,&#10;  /**&#10;   * Параметр сделки, отношение к сделке один к одному&#10;   */&#10;  public val oneOfDto: OneOfDtoDetail,&#10;) : IEntityDetail&lt;DealEntity&gt; {&#10;  /**&#10;   * Мета информация по сущности&#10;   */&#10;  public override val designEntityName: EntityEnum&#10;    get() = EntityEnum.Deal&#10;&#10;  /**&#10;   * Для опциональных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldOptional(entityName: EntityEnum):&#10;      IEntityDetail&lt;out IEntityOrigin&gt;? = when(entityName) {&#10;    EntityEnum.OptionalDealParam -&gt; optionalDealParam&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found optional synthetic field for entity&#10;        ${entityName}&quot;&quot;&quot;)&#10;  }&#10;&#10;  /**&#10;   * Для обязательных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldMandatory(entityName: EntityEnum):&#10;      IEntityDetail&lt;out IEntityOrigin&gt; = when(entityName) {&#10;    EntityEnum.OneOfDto -&gt; oneOfDto&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory synthetic field for entity&#10;        ${entityName}&quot;&quot;&quot;)&#10;  }&#10;&#10;  /**&#10;   * Для сущностей имеющих связь, много к одному к текущей. По имени сущности имеющей fk на текущую&#10;   * возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldSet(entityName: EntityEnum):&#10;      Set&lt;IEntityDetail&lt;out IEntityOrigin&gt;&gt; = when(entityName) {&#10;    EntityEnum.NoFKAndUk -&gt; noFKAndUk&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory Set synthetic field for&#10;        entity ${entityName}&quot;&quot;&quot;)&#10;  }&#10;}&#10;&gt;" type="org.opentest4j.AssertionFailedError">org.opentest4j.AssertionFailedError: expected: &lt;package ru.vood.dmgen.datamodel.sealedData

import javax.`annotation`.processing.Generated
import kotlin.collections.Set
import kotlinx.serialization.Serializable
import ru.vood.dmgen.`annotation`.ModelEntityDetail
import ru.vood.dmgen.datamodel.sealedData.intf.IEntityDetail
import ru.vood.dmgen.datamodel.sealedData.intf.IEntityOrigin
import ru.vood.dmgen.datamodel.sealedData.metaEnum.EntityEnum
import ru.vood.dmgen.datamodel.sealedData.oneOf.OneOfDtoDetail

/**
 * Это сущность Сделка
 */
@Generated(value = [&quot;ru.vood.processor.datamodel.generator.SyntheticEntityGenerator&quot;])
@Serializable
@ModelEntityDetail
public data class DealDetail(
  /**
   * Детальная сущность, с иными сущностями имеющими на текущую внешний ключ
   */
  public override val origin: DealEntity,
  /**
   * Параметр сделки, отношение к сделке один к одному
   */
  public val noFKAndUk: Set&lt;NoFKAndUkDetail&gt;,
  /**
   * Параметр сделки, отношение к сделке один к одному, опциональный
   */
  public val optionalDealParam: OptionalDealParamDetail?,
  /**
   * Параметр сделки, отношение к сделке один к одному
   */
  public val oneOfDto: OneOfDtoDetail,
) : IEntityDetail&lt;DealEntity&gt; {
  /**
   * Мета информация по сущности
   */
  public override val designEntityName: EntityEnum
    get() = EntityEnum.Deal

  /**
   * Для опциональных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.
   */
  public override fun syntheticFieldOptional(entityName: EntityEnum):
      IEntityDetail&lt;out IEntityOrigin&gt;? = when(entityName) {
    EntityEnum.OptionalDealParam -&gt; optionalDealParam
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found optional synthetic field for entity
        ${entityName}&quot;&quot;&quot;)
  }

  /**
   * Для обязательных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.
   */
  public override fun syntheticFieldMandatory(entityName: EntityEnum):
      IEntityDetail&lt;out IEntityOrigin&gt; = when(entityName) {
    EntityEnum.OneOfDto -&gt; oneOfDto
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory synthetic field for entity
        ${entityName}&quot;&quot;&quot;)
  }

  /**
   * Для сущностей имеющих связь, много к одному к текущей. По имени сущности имеющей fk на текущую
   * возвращает ее экземляр.
   */
  public override fun syntheticFieldSet(entityName: EntityEnum):
      Set&lt;IEntityDetail&lt;out IEntityOrigin&gt;&gt; = when(entityName) {
    EntityEnum.NoFKAndUk -&gt; noFKAndUk
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory Set synthetic field for
        entity ${entityName}&quot;&quot;&quot;)
  }
}
&gt; but was: &lt;package ru.vood.dmgen.datamodel.sealedData

import javax.`annotation`.processing.Generated
import kotlin.collections.Set
import kotlinx.serialization.Serializable
import ru.vood.dmgen.`annotation`.ModelEntityDetail
import ru.vood.dmgen.datamodel.sealedData.oneOf.OneOfDtoDetail
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.IEntityDetail
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.IEntityOrigin
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.metaEnum.EntityEnum

/**
 * Это сущность Сделка
 */
@Generated(value = [&quot;ru.vood.processor.datamodel.generator.SyntheticEntityGenerator&quot;])
@Serializable
@ModelEntityDetail
public data class DealDetail(
  /**
   * Детальная сущность, с иными сущностями имеющими на текущую внешний ключ
   */
  public override val origin: DealEntity,
  /**
   * Параметр сделки, отношение к сделке один к одному
   */
  public val noFKAndUk: Set&lt;NoFKAndUkDetail&gt;,
  /**
   * Параметр сделки, отношение к сделке один к одному, опциональный
   */
  public val optionalDealParam: OptionalDealParamDetail?,
  /**
   * Параметр сделки, отношение к сделке один к одному
   */
  public val oneOfDto: OneOfDtoDetail,
) : IEntityDetail&lt;DealEntity&gt; {
  /**
   * Мета информация по сущности
   */
  public override val designEntityName: EntityEnum
    get() = EntityEnum.Deal

  /**
   * Для опциональных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.
   */
  public override fun syntheticFieldOptional(entityName: EntityEnum):
      IEntityDetail&lt;out IEntityOrigin&gt;? = when(entityName) {
    EntityEnum.OptionalDealParam -&gt; optionalDealParam
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found optional synthetic field for entity
        ${entityName}&quot;&quot;&quot;)
  }

  /**
   * Для обязательных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.
   */
  public override fun syntheticFieldMandatory(entityName: EntityEnum):
      IEntityDetail&lt;out IEntityOrigin&gt; = when(entityName) {
    EntityEnum.OneOfDto -&gt; oneOfDto
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory synthetic field for entity
        ${entityName}&quot;&quot;&quot;)
  }

  /**
   * Для сущностей имеющих связь, много к одному к текущей. По имени сущности имеющей fk на текущую
   * возвращает ее экземляр.
   */
  public override fun syntheticFieldSet(entityName: EntityEnum):
      Set&lt;IEntityDetail&lt;out IEntityOrigin&gt;&gt; = when(entityName) {
    EntityEnum.NoFKAndUk -&gt; noFKAndUk
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory Set synthetic field for
        entity ${entityName}&quot;&quot;&quot;)
  }
}
&gt;
	at app//org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at app//org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at app//org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at app//org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)
	at app//org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)
	at app//org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1142)
	at app//ru.vood.processor.datamodel.abstraction.AbstractGeneratorTest.compareTextFile(AbstractGeneratorTest.kt:40)
	at app//ru.vood.processor.datamodel.generator.SyntheticEntityGeneratorTest.textFileTest(SyntheticEntityGeneratorTest.kt:36)
	at java.base@21.0.4/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base@21.0.4/java.lang.reflect.Method.invoke(Method.java:580)
	at app//org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)
	at app//org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestTemplateMethod(TimeoutExtension.java:94)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:226)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:204)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:142)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:110)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base@21.0.4/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base@21.0.4/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base@21.0.4/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base@21.0.4/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:110)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:44)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@21.0.4/java.util.ArrayList.forEach(ArrayList.java:1596)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@21.0.4/java.util.ArrayList.forEach(ArrayList.java:1596)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at app//org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at app//org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at app//org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:124)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:99)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:94)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:63)
	at java.base@21.0.4/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base@21.0.4/java.lang.reflect.Method.invoke(Method.java:580)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:92)
	at jdk.proxy1/jdk.proxy1.$Proxy4.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:200)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:132)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:103)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:63)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:121)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
</failure>
  </testcase>
  <testcase name="[2] TestCase(expectedClassFile=DealOneDataDetail)" classname="ru.vood.processor.datamodel.generator.SyntheticEntityGeneratorTest" time="0.003">
    <failure message="org.opentest4j.AssertionFailedError: expected: &lt;package ru.vood.dmgen.datamodel.sealedData.oneOf&#10;&#10;import javax.`annotation`.processing.Generated&#10;import kotlin.collections.Set&#10;import kotlinx.serialization.Serializable&#10;import ru.vood.dmgen.`annotation`.ModelEntityDetail&#10;import ru.vood.dmgen.datamodel.sealedData.intf.IEntityDetail&#10;import ru.vood.dmgen.datamodel.sealedData.intf.IEntityOrigin&#10;import ru.vood.dmgen.datamodel.sealedData.metaEnum.EntityEnum&#10;&#10;/**&#10; * Параметр сделки, отношение к сделке один к одному&#10; */&#10;@Generated(value = [&quot;ru.vood.processor.datamodel.generator.SyntheticEntityGenerator&quot;])&#10;@Serializable&#10;@ModelEntityDetail&#10;public data class DealOneDataDetail(&#10;  /**&#10;   * Детальная сущность, с иными сущностями имеющими на текущую внешний ключ&#10;   */&#10;  public override val origin: DealOneDataEntity,&#10;) : IEntityDetail&lt;DealOneDataEntity&gt; {&#10;  /**&#10;   * Мета информация по сущности&#10;   */&#10;  public override val designEntityName: EntityEnum&#10;    get() = EntityEnum.DealOneData&#10;&#10;  /**&#10;   * Для опциональных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldOptional(entityName: EntityEnum):&#10;      IEntityDetail&lt;out IEntityOrigin&gt;? = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found optional synthetic field for entity&#10;        ${entityName}&quot;&quot;&quot;)&#10;  }&#10;&#10;  /**&#10;   * Для обязательных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldMandatory(entityName: EntityEnum):&#10;      IEntityDetail&lt;out IEntityOrigin&gt; = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory synthetic field for entity&#10;        ${entityName}&quot;&quot;&quot;)&#10;  }&#10;&#10;  /**&#10;   * Для сущностей имеющих связь, много к одному к текущей. По имени сущности имеющей fk на текущую&#10;   * возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldSet(entityName: EntityEnum):&#10;      Set&lt;IEntityDetail&lt;out IEntityOrigin&gt;&gt; = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory Set synthetic field for&#10;        entity ${entityName}&quot;&quot;&quot;)&#10;  }&#10;}&#10;&gt; but was: &lt;package ru.vood.dmgen.datamodel.sealedData.oneOf&#10;&#10;import javax.`annotation`.processing.Generated&#10;import kotlin.collections.Set&#10;import kotlinx.serialization.Serializable&#10;import ru.vood.dmgen.`annotation`.ModelEntityDetail&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.IEntityDetail&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.IEntityOrigin&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.metaEnum.EntityEnum&#10;&#10;/**&#10; * Параметр сделки, отношение к сделке один к одному&#10; */&#10;@Generated(value = [&quot;ru.vood.processor.datamodel.generator.SyntheticEntityGenerator&quot;])&#10;@Serializable&#10;@ModelEntityDetail&#10;public data class DealOneDataDetail(&#10;  /**&#10;   * Детальная сущность, с иными сущностями имеющими на текущую внешний ключ&#10;   */&#10;  public override val origin: DealOneDataEntity,&#10;) : IEntityDetail&lt;DealOneDataEntity&gt; {&#10;  /**&#10;   * Мета информация по сущности&#10;   */&#10;  public override val designEntityName: EntityEnum&#10;    get() = EntityEnum.DealOneData&#10;&#10;  /**&#10;   * Для опциональных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldOptional(entityName: EntityEnum):&#10;      IEntityDetail&lt;out IEntityOrigin&gt;? = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found optional synthetic field for entity&#10;        ${entityName}&quot;&quot;&quot;)&#10;  }&#10;&#10;  /**&#10;   * Для обязательных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldMandatory(entityName: EntityEnum):&#10;      IEntityDetail&lt;out IEntityOrigin&gt; = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory synthetic field for entity&#10;        ${entityName}&quot;&quot;&quot;)&#10;  }&#10;&#10;  /**&#10;   * Для сущностей имеющих связь, много к одному к текущей. По имени сущности имеющей fk на текущую&#10;   * возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldSet(entityName: EntityEnum):&#10;      Set&lt;IEntityDetail&lt;out IEntityOrigin&gt;&gt; = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory Set synthetic field for&#10;        entity ${entityName}&quot;&quot;&quot;)&#10;  }&#10;}&#10;&gt;" type="org.opentest4j.AssertionFailedError">org.opentest4j.AssertionFailedError: expected: &lt;package ru.vood.dmgen.datamodel.sealedData.oneOf

import javax.`annotation`.processing.Generated
import kotlin.collections.Set
import kotlinx.serialization.Serializable
import ru.vood.dmgen.`annotation`.ModelEntityDetail
import ru.vood.dmgen.datamodel.sealedData.intf.IEntityDetail
import ru.vood.dmgen.datamodel.sealedData.intf.IEntityOrigin
import ru.vood.dmgen.datamodel.sealedData.metaEnum.EntityEnum

/**
 * Параметр сделки, отношение к сделке один к одному
 */
@Generated(value = [&quot;ru.vood.processor.datamodel.generator.SyntheticEntityGenerator&quot;])
@Serializable
@ModelEntityDetail
public data class DealOneDataDetail(
  /**
   * Детальная сущность, с иными сущностями имеющими на текущую внешний ключ
   */
  public override val origin: DealOneDataEntity,
) : IEntityDetail&lt;DealOneDataEntity&gt; {
  /**
   * Мета информация по сущности
   */
  public override val designEntityName: EntityEnum
    get() = EntityEnum.DealOneData

  /**
   * Для опциональных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.
   */
  public override fun syntheticFieldOptional(entityName: EntityEnum):
      IEntityDetail&lt;out IEntityOrigin&gt;? = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found optional synthetic field for entity
        ${entityName}&quot;&quot;&quot;)
  }

  /**
   * Для обязательных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.
   */
  public override fun syntheticFieldMandatory(entityName: EntityEnum):
      IEntityDetail&lt;out IEntityOrigin&gt; = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory synthetic field for entity
        ${entityName}&quot;&quot;&quot;)
  }

  /**
   * Для сущностей имеющих связь, много к одному к текущей. По имени сущности имеющей fk на текущую
   * возвращает ее экземляр.
   */
  public override fun syntheticFieldSet(entityName: EntityEnum):
      Set&lt;IEntityDetail&lt;out IEntityOrigin&gt;&gt; = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory Set synthetic field for
        entity ${entityName}&quot;&quot;&quot;)
  }
}
&gt; but was: &lt;package ru.vood.dmgen.datamodel.sealedData.oneOf

import javax.`annotation`.processing.Generated
import kotlin.collections.Set
import kotlinx.serialization.Serializable
import ru.vood.dmgen.`annotation`.ModelEntityDetail
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.IEntityDetail
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.IEntityOrigin
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.metaEnum.EntityEnum

/**
 * Параметр сделки, отношение к сделке один к одному
 */
@Generated(value = [&quot;ru.vood.processor.datamodel.generator.SyntheticEntityGenerator&quot;])
@Serializable
@ModelEntityDetail
public data class DealOneDataDetail(
  /**
   * Детальная сущность, с иными сущностями имеющими на текущую внешний ключ
   */
  public override val origin: DealOneDataEntity,
) : IEntityDetail&lt;DealOneDataEntity&gt; {
  /**
   * Мета информация по сущности
   */
  public override val designEntityName: EntityEnum
    get() = EntityEnum.DealOneData

  /**
   * Для опциональных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.
   */
  public override fun syntheticFieldOptional(entityName: EntityEnum):
      IEntityDetail&lt;out IEntityOrigin&gt;? = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found optional synthetic field for entity
        ${entityName}&quot;&quot;&quot;)
  }

  /**
   * Для обязательных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.
   */
  public override fun syntheticFieldMandatory(entityName: EntityEnum):
      IEntityDetail&lt;out IEntityOrigin&gt; = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory synthetic field for entity
        ${entityName}&quot;&quot;&quot;)
  }

  /**
   * Для сущностей имеющих связь, много к одному к текущей. По имени сущности имеющей fk на текущую
   * возвращает ее экземляр.
   */
  public override fun syntheticFieldSet(entityName: EntityEnum):
      Set&lt;IEntityDetail&lt;out IEntityOrigin&gt;&gt; = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory Set synthetic field for
        entity ${entityName}&quot;&quot;&quot;)
  }
}
&gt;
	at app//org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at app//org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at app//org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at app//org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)
	at app//org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)
	at app//org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1142)
	at app//ru.vood.processor.datamodel.abstraction.AbstractGeneratorTest.compareTextFile(AbstractGeneratorTest.kt:40)
	at app//ru.vood.processor.datamodel.generator.SyntheticEntityGeneratorTest.textFileTest(SyntheticEntityGeneratorTest.kt:36)
	at java.base@21.0.4/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base@21.0.4/java.lang.reflect.Method.invoke(Method.java:580)
	at app//org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)
	at app//org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestTemplateMethod(TimeoutExtension.java:94)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:226)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:204)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:142)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:110)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base@21.0.4/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base@21.0.4/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base@21.0.4/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base@21.0.4/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:110)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:44)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@21.0.4/java.util.ArrayList.forEach(ArrayList.java:1596)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@21.0.4/java.util.ArrayList.forEach(ArrayList.java:1596)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at app//org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at app//org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at app//org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:124)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:99)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:94)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:63)
	at java.base@21.0.4/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base@21.0.4/java.lang.reflect.Method.invoke(Method.java:580)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:92)
	at jdk.proxy1/jdk.proxy1.$Proxy4.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:200)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:132)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:103)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:63)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:121)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
</failure>
  </testcase>
  <testcase name="[3] TestCase(expectedClassFile=DealTwoDataDetail)" classname="ru.vood.processor.datamodel.generator.SyntheticEntityGeneratorTest" time="0.003">
    <failure message="org.opentest4j.AssertionFailedError: expected: &lt;package ru.vood.dmgen.datamodel.sealedData.oneOf&#10;&#10;import javax.`annotation`.processing.Generated&#10;import kotlin.collections.Set&#10;import kotlinx.serialization.Serializable&#10;import ru.vood.dmgen.`annotation`.ModelEntityDetail&#10;import ru.vood.dmgen.datamodel.sealedData.intf.IEntityDetail&#10;import ru.vood.dmgen.datamodel.sealedData.intf.IEntityOrigin&#10;import ru.vood.dmgen.datamodel.sealedData.metaEnum.EntityEnum&#10;&#10;/**&#10; * Параметр сделки, отношение к сделке один к одному&#10; */&#10;@Generated(value = [&quot;ru.vood.processor.datamodel.generator.SyntheticEntityGenerator&quot;])&#10;@Serializable&#10;@ModelEntityDetail&#10;public data class DealTwoDataDetail(&#10;  /**&#10;   * Детальная сущность, с иными сущностями имеющими на текущую внешний ключ&#10;   */&#10;  public override val origin: DealTwoDataEntity,&#10;) : IEntityDetail&lt;DealTwoDataEntity&gt; {&#10;  /**&#10;   * Мета информация по сущности&#10;   */&#10;  public override val designEntityName: EntityEnum&#10;    get() = EntityEnum.DealTwoData&#10;&#10;  /**&#10;   * Для опциональных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldOptional(entityName: EntityEnum):&#10;      IEntityDetail&lt;out IEntityOrigin&gt;? = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found optional synthetic field for entity&#10;        ${entityName}&quot;&quot;&quot;)&#10;  }&#10;&#10;  /**&#10;   * Для обязательных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldMandatory(entityName: EntityEnum):&#10;      IEntityDetail&lt;out IEntityOrigin&gt; = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory synthetic field for entity&#10;        ${entityName}&quot;&quot;&quot;)&#10;  }&#10;&#10;  /**&#10;   * Для сущностей имеющих связь, много к одному к текущей. По имени сущности имеющей fk на текущую&#10;   * возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldSet(entityName: EntityEnum):&#10;      Set&lt;IEntityDetail&lt;out IEntityOrigin&gt;&gt; = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory Set synthetic field for&#10;        entity ${entityName}&quot;&quot;&quot;)&#10;  }&#10;}&#10;&gt; but was: &lt;package ru.vood.dmgen.datamodel.sealedData.oneOf&#10;&#10;import javax.`annotation`.processing.Generated&#10;import kotlin.collections.Set&#10;import kotlinx.serialization.Serializable&#10;import ru.vood.dmgen.`annotation`.ModelEntityDetail&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.IEntityDetail&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.IEntityOrigin&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.metaEnum.EntityEnum&#10;&#10;/**&#10; * Параметр сделки, отношение к сделке один к одному&#10; */&#10;@Generated(value = [&quot;ru.vood.processor.datamodel.generator.SyntheticEntityGenerator&quot;])&#10;@Serializable&#10;@ModelEntityDetail&#10;public data class DealTwoDataDetail(&#10;  /**&#10;   * Детальная сущность, с иными сущностями имеющими на текущую внешний ключ&#10;   */&#10;  public override val origin: DealTwoDataEntity,&#10;) : IEntityDetail&lt;DealTwoDataEntity&gt; {&#10;  /**&#10;   * Мета информация по сущности&#10;   */&#10;  public override val designEntityName: EntityEnum&#10;    get() = EntityEnum.DealTwoData&#10;&#10;  /**&#10;   * Для опциональных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldOptional(entityName: EntityEnum):&#10;      IEntityDetail&lt;out IEntityOrigin&gt;? = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found optional synthetic field for entity&#10;        ${entityName}&quot;&quot;&quot;)&#10;  }&#10;&#10;  /**&#10;   * Для обязательных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldMandatory(entityName: EntityEnum):&#10;      IEntityDetail&lt;out IEntityOrigin&gt; = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory synthetic field for entity&#10;        ${entityName}&quot;&quot;&quot;)&#10;  }&#10;&#10;  /**&#10;   * Для сущностей имеющих связь, много к одному к текущей. По имени сущности имеющей fk на текущую&#10;   * возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldSet(entityName: EntityEnum):&#10;      Set&lt;IEntityDetail&lt;out IEntityOrigin&gt;&gt; = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory Set synthetic field for&#10;        entity ${entityName}&quot;&quot;&quot;)&#10;  }&#10;}&#10;&gt;" type="org.opentest4j.AssertionFailedError">org.opentest4j.AssertionFailedError: expected: &lt;package ru.vood.dmgen.datamodel.sealedData.oneOf

import javax.`annotation`.processing.Generated
import kotlin.collections.Set
import kotlinx.serialization.Serializable
import ru.vood.dmgen.`annotation`.ModelEntityDetail
import ru.vood.dmgen.datamodel.sealedData.intf.IEntityDetail
import ru.vood.dmgen.datamodel.sealedData.intf.IEntityOrigin
import ru.vood.dmgen.datamodel.sealedData.metaEnum.EntityEnum

/**
 * Параметр сделки, отношение к сделке один к одному
 */
@Generated(value = [&quot;ru.vood.processor.datamodel.generator.SyntheticEntityGenerator&quot;])
@Serializable
@ModelEntityDetail
public data class DealTwoDataDetail(
  /**
   * Детальная сущность, с иными сущностями имеющими на текущую внешний ключ
   */
  public override val origin: DealTwoDataEntity,
) : IEntityDetail&lt;DealTwoDataEntity&gt; {
  /**
   * Мета информация по сущности
   */
  public override val designEntityName: EntityEnum
    get() = EntityEnum.DealTwoData

  /**
   * Для опциональных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.
   */
  public override fun syntheticFieldOptional(entityName: EntityEnum):
      IEntityDetail&lt;out IEntityOrigin&gt;? = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found optional synthetic field for entity
        ${entityName}&quot;&quot;&quot;)
  }

  /**
   * Для обязательных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.
   */
  public override fun syntheticFieldMandatory(entityName: EntityEnum):
      IEntityDetail&lt;out IEntityOrigin&gt; = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory synthetic field for entity
        ${entityName}&quot;&quot;&quot;)
  }

  /**
   * Для сущностей имеющих связь, много к одному к текущей. По имени сущности имеющей fk на текущую
   * возвращает ее экземляр.
   */
  public override fun syntheticFieldSet(entityName: EntityEnum):
      Set&lt;IEntityDetail&lt;out IEntityOrigin&gt;&gt; = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory Set synthetic field for
        entity ${entityName}&quot;&quot;&quot;)
  }
}
&gt; but was: &lt;package ru.vood.dmgen.datamodel.sealedData.oneOf

import javax.`annotation`.processing.Generated
import kotlin.collections.Set
import kotlinx.serialization.Serializable
import ru.vood.dmgen.`annotation`.ModelEntityDetail
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.IEntityDetail
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.IEntityOrigin
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.metaEnum.EntityEnum

/**
 * Параметр сделки, отношение к сделке один к одному
 */
@Generated(value = [&quot;ru.vood.processor.datamodel.generator.SyntheticEntityGenerator&quot;])
@Serializable
@ModelEntityDetail
public data class DealTwoDataDetail(
  /**
   * Детальная сущность, с иными сущностями имеющими на текущую внешний ключ
   */
  public override val origin: DealTwoDataEntity,
) : IEntityDetail&lt;DealTwoDataEntity&gt; {
  /**
   * Мета информация по сущности
   */
  public override val designEntityName: EntityEnum
    get() = EntityEnum.DealTwoData

  /**
   * Для опциональных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.
   */
  public override fun syntheticFieldOptional(entityName: EntityEnum):
      IEntityDetail&lt;out IEntityOrigin&gt;? = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found optional synthetic field for entity
        ${entityName}&quot;&quot;&quot;)
  }

  /**
   * Для обязательных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.
   */
  public override fun syntheticFieldMandatory(entityName: EntityEnum):
      IEntityDetail&lt;out IEntityOrigin&gt; = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory synthetic field for entity
        ${entityName}&quot;&quot;&quot;)
  }

  /**
   * Для сущностей имеющих связь, много к одному к текущей. По имени сущности имеющей fk на текущую
   * возвращает ее экземляр.
   */
  public override fun syntheticFieldSet(entityName: EntityEnum):
      Set&lt;IEntityDetail&lt;out IEntityOrigin&gt;&gt; = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory Set synthetic field for
        entity ${entityName}&quot;&quot;&quot;)
  }
}
&gt;
	at app//org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at app//org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at app//org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at app//org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)
	at app//org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)
	at app//org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1142)
	at app//ru.vood.processor.datamodel.abstraction.AbstractGeneratorTest.compareTextFile(AbstractGeneratorTest.kt:40)
	at app//ru.vood.processor.datamodel.generator.SyntheticEntityGeneratorTest.textFileTest(SyntheticEntityGeneratorTest.kt:36)
	at java.base@21.0.4/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base@21.0.4/java.lang.reflect.Method.invoke(Method.java:580)
	at app//org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)
	at app//org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestTemplateMethod(TimeoutExtension.java:94)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:226)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:204)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:142)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:110)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base@21.0.4/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base@21.0.4/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base@21.0.4/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base@21.0.4/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:110)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:44)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@21.0.4/java.util.ArrayList.forEach(ArrayList.java:1596)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@21.0.4/java.util.ArrayList.forEach(ArrayList.java:1596)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at app//org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at app//org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at app//org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:124)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:99)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:94)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:63)
	at java.base@21.0.4/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base@21.0.4/java.lang.reflect.Method.invoke(Method.java:580)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:92)
	at jdk.proxy1/jdk.proxy1.$Proxy4.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:200)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:132)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:103)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:63)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:121)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
</failure>
  </testcase>
  <testcase name="[4] TestCase(expectedClassFile=NoFKAndUkDetail)" classname="ru.vood.processor.datamodel.generator.SyntheticEntityGeneratorTest" time="0.003">
    <failure message="org.opentest4j.AssertionFailedError: expected: &lt;package ru.vood.dmgen.datamodel.sealedData&#10;&#10;import javax.`annotation`.processing.Generated&#10;import kotlin.collections.Set&#10;import kotlinx.serialization.Serializable&#10;import ru.vood.dmgen.`annotation`.ModelEntityDetail&#10;import ru.vood.dmgen.datamodel.sealedData.intf.IEntityDetail&#10;import ru.vood.dmgen.datamodel.sealedData.intf.IEntityOrigin&#10;import ru.vood.dmgen.datamodel.sealedData.metaEnum.EntityEnum&#10;&#10;/**&#10; * Параметр сделки, отношение к сделке один к одному&#10; */&#10;@Generated(value = [&quot;ru.vood.processor.datamodel.generator.SyntheticEntityGenerator&quot;])&#10;@Serializable&#10;@ModelEntityDetail&#10;public data class NoFKAndUkDetail(&#10;  /**&#10;   * Детальная сущность, с иными сущностями имеющими на текущую внешний ключ&#10;   */&#10;  public override val origin: NoFKAndUkEntity,&#10;) : IEntityDetail&lt;NoFKAndUkEntity&gt; {&#10;  /**&#10;   * Мета информация по сущности&#10;   */&#10;  public override val designEntityName: EntityEnum&#10;    get() = EntityEnum.NoFKAndUk&#10;&#10;  /**&#10;   * Для опциональных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldOptional(entityName: EntityEnum):&#10;      IEntityDetail&lt;out IEntityOrigin&gt;? = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found optional synthetic field for entity&#10;        ${entityName}&quot;&quot;&quot;)&#10;  }&#10;&#10;  /**&#10;   * Для обязательных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldMandatory(entityName: EntityEnum):&#10;      IEntityDetail&lt;out IEntityOrigin&gt; = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory synthetic field for entity&#10;        ${entityName}&quot;&quot;&quot;)&#10;  }&#10;&#10;  /**&#10;   * Для сущностей имеющих связь, много к одному к текущей. По имени сущности имеющей fk на текущую&#10;   * возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldSet(entityName: EntityEnum):&#10;      Set&lt;IEntityDetail&lt;out IEntityOrigin&gt;&gt; = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory Set synthetic field for&#10;        entity ${entityName}&quot;&quot;&quot;)&#10;  }&#10;}&#10;&gt; but was: &lt;package ru.vood.dmgen.datamodel.sealedData&#10;&#10;import javax.`annotation`.processing.Generated&#10;import kotlin.collections.Set&#10;import kotlinx.serialization.Serializable&#10;import ru.vood.dmgen.`annotation`.ModelEntityDetail&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.IEntityDetail&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.IEntityOrigin&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.metaEnum.EntityEnum&#10;&#10;/**&#10; * Параметр сделки, отношение к сделке один к одному&#10; */&#10;@Generated(value = [&quot;ru.vood.processor.datamodel.generator.SyntheticEntityGenerator&quot;])&#10;@Serializable&#10;@ModelEntityDetail&#10;public data class NoFKAndUkDetail(&#10;  /**&#10;   * Детальная сущность, с иными сущностями имеющими на текущую внешний ключ&#10;   */&#10;  public override val origin: NoFKAndUkEntity,&#10;) : IEntityDetail&lt;NoFKAndUkEntity&gt; {&#10;  /**&#10;   * Мета информация по сущности&#10;   */&#10;  public override val designEntityName: EntityEnum&#10;    get() = EntityEnum.NoFKAndUk&#10;&#10;  /**&#10;   * Для опциональных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldOptional(entityName: EntityEnum):&#10;      IEntityDetail&lt;out IEntityOrigin&gt;? = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found optional synthetic field for entity&#10;        ${entityName}&quot;&quot;&quot;)&#10;  }&#10;&#10;  /**&#10;   * Для обязательных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldMandatory(entityName: EntityEnum):&#10;      IEntityDetail&lt;out IEntityOrigin&gt; = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory synthetic field for entity&#10;        ${entityName}&quot;&quot;&quot;)&#10;  }&#10;&#10;  /**&#10;   * Для сущностей имеющих связь, много к одному к текущей. По имени сущности имеющей fk на текущую&#10;   * возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldSet(entityName: EntityEnum):&#10;      Set&lt;IEntityDetail&lt;out IEntityOrigin&gt;&gt; = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory Set synthetic field for&#10;        entity ${entityName}&quot;&quot;&quot;)&#10;  }&#10;}&#10;&gt;" type="org.opentest4j.AssertionFailedError">org.opentest4j.AssertionFailedError: expected: &lt;package ru.vood.dmgen.datamodel.sealedData

import javax.`annotation`.processing.Generated
import kotlin.collections.Set
import kotlinx.serialization.Serializable
import ru.vood.dmgen.`annotation`.ModelEntityDetail
import ru.vood.dmgen.datamodel.sealedData.intf.IEntityDetail
import ru.vood.dmgen.datamodel.sealedData.intf.IEntityOrigin
import ru.vood.dmgen.datamodel.sealedData.metaEnum.EntityEnum

/**
 * Параметр сделки, отношение к сделке один к одному
 */
@Generated(value = [&quot;ru.vood.processor.datamodel.generator.SyntheticEntityGenerator&quot;])
@Serializable
@ModelEntityDetail
public data class NoFKAndUkDetail(
  /**
   * Детальная сущность, с иными сущностями имеющими на текущую внешний ключ
   */
  public override val origin: NoFKAndUkEntity,
) : IEntityDetail&lt;NoFKAndUkEntity&gt; {
  /**
   * Мета информация по сущности
   */
  public override val designEntityName: EntityEnum
    get() = EntityEnum.NoFKAndUk

  /**
   * Для опциональных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.
   */
  public override fun syntheticFieldOptional(entityName: EntityEnum):
      IEntityDetail&lt;out IEntityOrigin&gt;? = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found optional synthetic field for entity
        ${entityName}&quot;&quot;&quot;)
  }

  /**
   * Для обязательных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.
   */
  public override fun syntheticFieldMandatory(entityName: EntityEnum):
      IEntityDetail&lt;out IEntityOrigin&gt; = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory synthetic field for entity
        ${entityName}&quot;&quot;&quot;)
  }

  /**
   * Для сущностей имеющих связь, много к одному к текущей. По имени сущности имеющей fk на текущую
   * возвращает ее экземляр.
   */
  public override fun syntheticFieldSet(entityName: EntityEnum):
      Set&lt;IEntityDetail&lt;out IEntityOrigin&gt;&gt; = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory Set synthetic field for
        entity ${entityName}&quot;&quot;&quot;)
  }
}
&gt; but was: &lt;package ru.vood.dmgen.datamodel.sealedData

import javax.`annotation`.processing.Generated
import kotlin.collections.Set
import kotlinx.serialization.Serializable
import ru.vood.dmgen.`annotation`.ModelEntityDetail
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.IEntityDetail
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.IEntityOrigin
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.metaEnum.EntityEnum

/**
 * Параметр сделки, отношение к сделке один к одному
 */
@Generated(value = [&quot;ru.vood.processor.datamodel.generator.SyntheticEntityGenerator&quot;])
@Serializable
@ModelEntityDetail
public data class NoFKAndUkDetail(
  /**
   * Детальная сущность, с иными сущностями имеющими на текущую внешний ключ
   */
  public override val origin: NoFKAndUkEntity,
) : IEntityDetail&lt;NoFKAndUkEntity&gt; {
  /**
   * Мета информация по сущности
   */
  public override val designEntityName: EntityEnum
    get() = EntityEnum.NoFKAndUk

  /**
   * Для опциональных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.
   */
  public override fun syntheticFieldOptional(entityName: EntityEnum):
      IEntityDetail&lt;out IEntityOrigin&gt;? = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found optional synthetic field for entity
        ${entityName}&quot;&quot;&quot;)
  }

  /**
   * Для обязательных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.
   */
  public override fun syntheticFieldMandatory(entityName: EntityEnum):
      IEntityDetail&lt;out IEntityOrigin&gt; = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory synthetic field for entity
        ${entityName}&quot;&quot;&quot;)
  }

  /**
   * Для сущностей имеющих связь, много к одному к текущей. По имени сущности имеющей fk на текущую
   * возвращает ее экземляр.
   */
  public override fun syntheticFieldSet(entityName: EntityEnum):
      Set&lt;IEntityDetail&lt;out IEntityOrigin&gt;&gt; = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory Set synthetic field for
        entity ${entityName}&quot;&quot;&quot;)
  }
}
&gt;
	at app//org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at app//org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at app//org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at app//org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)
	at app//org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)
	at app//org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1142)
	at app//ru.vood.processor.datamodel.abstraction.AbstractGeneratorTest.compareTextFile(AbstractGeneratorTest.kt:40)
	at app//ru.vood.processor.datamodel.generator.SyntheticEntityGeneratorTest.textFileTest(SyntheticEntityGeneratorTest.kt:36)
	at java.base@21.0.4/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base@21.0.4/java.lang.reflect.Method.invoke(Method.java:580)
	at app//org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)
	at app//org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestTemplateMethod(TimeoutExtension.java:94)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:226)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:204)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:142)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:110)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base@21.0.4/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base@21.0.4/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base@21.0.4/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base@21.0.4/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:110)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:44)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@21.0.4/java.util.ArrayList.forEach(ArrayList.java:1596)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@21.0.4/java.util.ArrayList.forEach(ArrayList.java:1596)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at app//org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at app//org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at app//org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:124)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:99)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:94)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:63)
	at java.base@21.0.4/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base@21.0.4/java.lang.reflect.Method.invoke(Method.java:580)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:92)
	at jdk.proxy1/jdk.proxy1.$Proxy4.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:200)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:132)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:103)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:63)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:121)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
</failure>
  </testcase>
  <testcase name="[5] TestCase(expectedClassFile=OneOfDtoDetail)" classname="ru.vood.processor.datamodel.generator.SyntheticEntityGeneratorTest" time="0.003">
    <failure message="org.opentest4j.AssertionFailedError: expected: &lt;package ru.vood.dmgen.datamodel.sealedData.oneOf&#10;&#10;import javax.`annotation`.processing.Generated&#10;import kotlin.collections.Set&#10;import kotlinx.serialization.Serializable&#10;import ru.vood.dmgen.`annotation`.ModelEntityDetail&#10;import ru.vood.dmgen.datamodel.sealedData.intf.IEntityDetail&#10;import ru.vood.dmgen.datamodel.sealedData.intf.IEntityOrigin&#10;import ru.vood.dmgen.datamodel.sealedData.metaEnum.EntityEnum&#10;&#10;/**&#10; * Параметр сделки, отношение к сделке один к одному&#10; */&#10;@Generated(value = [&quot;ru.vood.processor.datamodel.generator.SyntheticEntityGenerator&quot;])&#10;@Serializable&#10;@ModelEntityDetail&#10;public data class OneOfDtoDetail(&#10;  /**&#10;   * Детальная сущность, с иными сущностями имеющими на текущую внешний ключ&#10;   */&#10;  public override val origin: OneOfDtoEntity,&#10;) : IEntityDetail&lt;OneOfDtoEntity&gt; {&#10;  /**&#10;   * Мета информация по сущности&#10;   */&#10;  public override val designEntityName: EntityEnum&#10;    get() = EntityEnum.OneOfDto&#10;&#10;  /**&#10;   * Для опциональных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldOptional(entityName: EntityEnum):&#10;      IEntityDetail&lt;out IEntityOrigin&gt;? = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found optional synthetic field for entity&#10;        ${entityName}&quot;&quot;&quot;)&#10;  }&#10;&#10;  /**&#10;   * Для обязательных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldMandatory(entityName: EntityEnum):&#10;      IEntityDetail&lt;out IEntityOrigin&gt; = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory synthetic field for entity&#10;        ${entityName}&quot;&quot;&quot;)&#10;  }&#10;&#10;  /**&#10;   * Для сущностей имеющих связь, много к одному к текущей. По имени сущности имеющей fk на текущую&#10;   * возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldSet(entityName: EntityEnum):&#10;      Set&lt;IEntityDetail&lt;out IEntityOrigin&gt;&gt; = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory Set synthetic field for&#10;        entity ${entityName}&quot;&quot;&quot;)&#10;  }&#10;}&#10;&gt; but was: &lt;package ru.vood.dmgen.datamodel.sealedData.oneOf&#10;&#10;import javax.`annotation`.processing.Generated&#10;import kotlin.collections.Set&#10;import kotlinx.serialization.Serializable&#10;import ru.vood.dmgen.`annotation`.ModelEntityDetail&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.IEntityDetail&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.IEntityOrigin&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.metaEnum.EntityEnum&#10;&#10;/**&#10; * Параметр сделки, отношение к сделке один к одному&#10; */&#10;@Generated(value = [&quot;ru.vood.processor.datamodel.generator.SyntheticEntityGenerator&quot;])&#10;@Serializable&#10;@ModelEntityDetail&#10;public data class OneOfDtoDetail(&#10;  /**&#10;   * Детальная сущность, с иными сущностями имеющими на текущую внешний ключ&#10;   */&#10;  public override val origin: OneOfDtoEntity,&#10;) : IEntityDetail&lt;OneOfDtoEntity&gt; {&#10;  /**&#10;   * Мета информация по сущности&#10;   */&#10;  public override val designEntityName: EntityEnum&#10;    get() = EntityEnum.OneOfDto&#10;&#10;  /**&#10;   * Для опциональных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldOptional(entityName: EntityEnum):&#10;      IEntityDetail&lt;out IEntityOrigin&gt;? = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found optional synthetic field for entity&#10;        ${entityName}&quot;&quot;&quot;)&#10;  }&#10;&#10;  /**&#10;   * Для обязательных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldMandatory(entityName: EntityEnum):&#10;      IEntityDetail&lt;out IEntityOrigin&gt; = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory synthetic field for entity&#10;        ${entityName}&quot;&quot;&quot;)&#10;  }&#10;&#10;  /**&#10;   * Для сущностей имеющих связь, много к одному к текущей. По имени сущности имеющей fk на текущую&#10;   * возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldSet(entityName: EntityEnum):&#10;      Set&lt;IEntityDetail&lt;out IEntityOrigin&gt;&gt; = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory Set synthetic field for&#10;        entity ${entityName}&quot;&quot;&quot;)&#10;  }&#10;}&#10;&gt;" type="org.opentest4j.AssertionFailedError">org.opentest4j.AssertionFailedError: expected: &lt;package ru.vood.dmgen.datamodel.sealedData.oneOf

import javax.`annotation`.processing.Generated
import kotlin.collections.Set
import kotlinx.serialization.Serializable
import ru.vood.dmgen.`annotation`.ModelEntityDetail
import ru.vood.dmgen.datamodel.sealedData.intf.IEntityDetail
import ru.vood.dmgen.datamodel.sealedData.intf.IEntityOrigin
import ru.vood.dmgen.datamodel.sealedData.metaEnum.EntityEnum

/**
 * Параметр сделки, отношение к сделке один к одному
 */
@Generated(value = [&quot;ru.vood.processor.datamodel.generator.SyntheticEntityGenerator&quot;])
@Serializable
@ModelEntityDetail
public data class OneOfDtoDetail(
  /**
   * Детальная сущность, с иными сущностями имеющими на текущую внешний ключ
   */
  public override val origin: OneOfDtoEntity,
) : IEntityDetail&lt;OneOfDtoEntity&gt; {
  /**
   * Мета информация по сущности
   */
  public override val designEntityName: EntityEnum
    get() = EntityEnum.OneOfDto

  /**
   * Для опциональных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.
   */
  public override fun syntheticFieldOptional(entityName: EntityEnum):
      IEntityDetail&lt;out IEntityOrigin&gt;? = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found optional synthetic field for entity
        ${entityName}&quot;&quot;&quot;)
  }

  /**
   * Для обязательных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.
   */
  public override fun syntheticFieldMandatory(entityName: EntityEnum):
      IEntityDetail&lt;out IEntityOrigin&gt; = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory synthetic field for entity
        ${entityName}&quot;&quot;&quot;)
  }

  /**
   * Для сущностей имеющих связь, много к одному к текущей. По имени сущности имеющей fk на текущую
   * возвращает ее экземляр.
   */
  public override fun syntheticFieldSet(entityName: EntityEnum):
      Set&lt;IEntityDetail&lt;out IEntityOrigin&gt;&gt; = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory Set synthetic field for
        entity ${entityName}&quot;&quot;&quot;)
  }
}
&gt; but was: &lt;package ru.vood.dmgen.datamodel.sealedData.oneOf

import javax.`annotation`.processing.Generated
import kotlin.collections.Set
import kotlinx.serialization.Serializable
import ru.vood.dmgen.`annotation`.ModelEntityDetail
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.IEntityDetail
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.IEntityOrigin
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.metaEnum.EntityEnum

/**
 * Параметр сделки, отношение к сделке один к одному
 */
@Generated(value = [&quot;ru.vood.processor.datamodel.generator.SyntheticEntityGenerator&quot;])
@Serializable
@ModelEntityDetail
public data class OneOfDtoDetail(
  /**
   * Детальная сущность, с иными сущностями имеющими на текущую внешний ключ
   */
  public override val origin: OneOfDtoEntity,
) : IEntityDetail&lt;OneOfDtoEntity&gt; {
  /**
   * Мета информация по сущности
   */
  public override val designEntityName: EntityEnum
    get() = EntityEnum.OneOfDto

  /**
   * Для опциональных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.
   */
  public override fun syntheticFieldOptional(entityName: EntityEnum):
      IEntityDetail&lt;out IEntityOrigin&gt;? = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found optional synthetic field for entity
        ${entityName}&quot;&quot;&quot;)
  }

  /**
   * Для обязательных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.
   */
  public override fun syntheticFieldMandatory(entityName: EntityEnum):
      IEntityDetail&lt;out IEntityOrigin&gt; = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory synthetic field for entity
        ${entityName}&quot;&quot;&quot;)
  }

  /**
   * Для сущностей имеющих связь, много к одному к текущей. По имени сущности имеющей fk на текущую
   * возвращает ее экземляр.
   */
  public override fun syntheticFieldSet(entityName: EntityEnum):
      Set&lt;IEntityDetail&lt;out IEntityOrigin&gt;&gt; = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory Set synthetic field for
        entity ${entityName}&quot;&quot;&quot;)
  }
}
&gt;
	at app//org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at app//org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at app//org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at app//org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)
	at app//org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)
	at app//org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1142)
	at app//ru.vood.processor.datamodel.abstraction.AbstractGeneratorTest.compareTextFile(AbstractGeneratorTest.kt:40)
	at app//ru.vood.processor.datamodel.generator.SyntheticEntityGeneratorTest.textFileTest(SyntheticEntityGeneratorTest.kt:36)
	at java.base@21.0.4/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base@21.0.4/java.lang.reflect.Method.invoke(Method.java:580)
	at app//org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)
	at app//org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestTemplateMethod(TimeoutExtension.java:94)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:226)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:204)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:142)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:110)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base@21.0.4/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base@21.0.4/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base@21.0.4/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base@21.0.4/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:110)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:44)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@21.0.4/java.util.ArrayList.forEach(ArrayList.java:1596)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@21.0.4/java.util.ArrayList.forEach(ArrayList.java:1596)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at app//org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at app//org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at app//org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:124)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:99)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:94)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:63)
	at java.base@21.0.4/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base@21.0.4/java.lang.reflect.Method.invoke(Method.java:580)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:92)
	at jdk.proxy1/jdk.proxy1.$Proxy4.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:200)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:132)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:103)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:63)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:121)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
</failure>
  </testcase>
  <testcase name="[6] TestCase(expectedClassFile=OptionalDealParamDetail)" classname="ru.vood.processor.datamodel.generator.SyntheticEntityGeneratorTest" time="0.002">
    <failure message="org.opentest4j.AssertionFailedError: expected: &lt;package ru.vood.dmgen.datamodel.sealedData&#10;&#10;import javax.`annotation`.processing.Generated&#10;import kotlin.collections.Set&#10;import kotlinx.serialization.Serializable&#10;import ru.vood.dmgen.`annotation`.ModelEntityDetail&#10;import ru.vood.dmgen.datamodel.sealedData.intf.IEntityDetail&#10;import ru.vood.dmgen.datamodel.sealedData.intf.IEntityOrigin&#10;import ru.vood.dmgen.datamodel.sealedData.metaEnum.EntityEnum&#10;&#10;/**&#10; * Параметр сделки, отношение к сделке один к одному, опциональный&#10; */&#10;@Generated(value = [&quot;ru.vood.processor.datamodel.generator.SyntheticEntityGenerator&quot;])&#10;@Serializable&#10;@ModelEntityDetail&#10;public data class OptionalDealParamDetail(&#10;  /**&#10;   * Детальная сущность, с иными сущностями имеющими на текущую внешний ключ&#10;   */&#10;  public override val origin: OptionalDealParamEntity,&#10;) : IEntityDetail&lt;OptionalDealParamEntity&gt; {&#10;  /**&#10;   * Мета информация по сущности&#10;   */&#10;  public override val designEntityName: EntityEnum&#10;    get() = EntityEnum.OptionalDealParam&#10;&#10;  /**&#10;   * Для опциональных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldOptional(entityName: EntityEnum):&#10;      IEntityDetail&lt;out IEntityOrigin&gt;? = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found optional synthetic field for entity&#10;        ${entityName}&quot;&quot;&quot;)&#10;  }&#10;&#10;  /**&#10;   * Для обязательных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldMandatory(entityName: EntityEnum):&#10;      IEntityDetail&lt;out IEntityOrigin&gt; = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory synthetic field for entity&#10;        ${entityName}&quot;&quot;&quot;)&#10;  }&#10;&#10;  /**&#10;   * Для сущностей имеющих связь, много к одному к текущей. По имени сущности имеющей fk на текущую&#10;   * возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldSet(entityName: EntityEnum):&#10;      Set&lt;IEntityDetail&lt;out IEntityOrigin&gt;&gt; = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory Set synthetic field for&#10;        entity ${entityName}&quot;&quot;&quot;)&#10;  }&#10;}&#10;&gt; but was: &lt;package ru.vood.dmgen.datamodel.sealedData&#10;&#10;import javax.`annotation`.processing.Generated&#10;import kotlin.collections.Set&#10;import kotlinx.serialization.Serializable&#10;import ru.vood.dmgen.`annotation`.ModelEntityDetail&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.IEntityDetail&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.IEntityOrigin&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.metaEnum.EntityEnum&#10;&#10;/**&#10; * Параметр сделки, отношение к сделке один к одному, опциональный&#10; */&#10;@Generated(value = [&quot;ru.vood.processor.datamodel.generator.SyntheticEntityGenerator&quot;])&#10;@Serializable&#10;@ModelEntityDetail&#10;public data class OptionalDealParamDetail(&#10;  /**&#10;   * Детальная сущность, с иными сущностями имеющими на текущую внешний ключ&#10;   */&#10;  public override val origin: OptionalDealParamEntity,&#10;) : IEntityDetail&lt;OptionalDealParamEntity&gt; {&#10;  /**&#10;   * Мета информация по сущности&#10;   */&#10;  public override val designEntityName: EntityEnum&#10;    get() = EntityEnum.OptionalDealParam&#10;&#10;  /**&#10;   * Для опциональных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldOptional(entityName: EntityEnum):&#10;      IEntityDetail&lt;out IEntityOrigin&gt;? = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found optional synthetic field for entity&#10;        ${entityName}&quot;&quot;&quot;)&#10;  }&#10;&#10;  /**&#10;   * Для обязательных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldMandatory(entityName: EntityEnum):&#10;      IEntityDetail&lt;out IEntityOrigin&gt; = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory synthetic field for entity&#10;        ${entityName}&quot;&quot;&quot;)&#10;  }&#10;&#10;  /**&#10;   * Для сущностей имеющих связь, много к одному к текущей. По имени сущности имеющей fk на текущую&#10;   * возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldSet(entityName: EntityEnum):&#10;      Set&lt;IEntityDetail&lt;out IEntityOrigin&gt;&gt; = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory Set synthetic field for&#10;        entity ${entityName}&quot;&quot;&quot;)&#10;  }&#10;}&#10;&gt;" type="org.opentest4j.AssertionFailedError">org.opentest4j.AssertionFailedError: expected: &lt;package ru.vood.dmgen.datamodel.sealedData

import javax.`annotation`.processing.Generated
import kotlin.collections.Set
import kotlinx.serialization.Serializable
import ru.vood.dmgen.`annotation`.ModelEntityDetail
import ru.vood.dmgen.datamodel.sealedData.intf.IEntityDetail
import ru.vood.dmgen.datamodel.sealedData.intf.IEntityOrigin
import ru.vood.dmgen.datamodel.sealedData.metaEnum.EntityEnum

/**
 * Параметр сделки, отношение к сделке один к одному, опциональный
 */
@Generated(value = [&quot;ru.vood.processor.datamodel.generator.SyntheticEntityGenerator&quot;])
@Serializable
@ModelEntityDetail
public data class OptionalDealParamDetail(
  /**
   * Детальная сущность, с иными сущностями имеющими на текущую внешний ключ
   */
  public override val origin: OptionalDealParamEntity,
) : IEntityDetail&lt;OptionalDealParamEntity&gt; {
  /**
   * Мета информация по сущности
   */
  public override val designEntityName: EntityEnum
    get() = EntityEnum.OptionalDealParam

  /**
   * Для опциональных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.
   */
  public override fun syntheticFieldOptional(entityName: EntityEnum):
      IEntityDetail&lt;out IEntityOrigin&gt;? = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found optional synthetic field for entity
        ${entityName}&quot;&quot;&quot;)
  }

  /**
   * Для обязательных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.
   */
  public override fun syntheticFieldMandatory(entityName: EntityEnum):
      IEntityDetail&lt;out IEntityOrigin&gt; = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory synthetic field for entity
        ${entityName}&quot;&quot;&quot;)
  }

  /**
   * Для сущностей имеющих связь, много к одному к текущей. По имени сущности имеющей fk на текущую
   * возвращает ее экземляр.
   */
  public override fun syntheticFieldSet(entityName: EntityEnum):
      Set&lt;IEntityDetail&lt;out IEntityOrigin&gt;&gt; = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory Set synthetic field for
        entity ${entityName}&quot;&quot;&quot;)
  }
}
&gt; but was: &lt;package ru.vood.dmgen.datamodel.sealedData

import javax.`annotation`.processing.Generated
import kotlin.collections.Set
import kotlinx.serialization.Serializable
import ru.vood.dmgen.`annotation`.ModelEntityDetail
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.IEntityDetail
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.IEntityOrigin
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.metaEnum.EntityEnum

/**
 * Параметр сделки, отношение к сделке один к одному, опциональный
 */
@Generated(value = [&quot;ru.vood.processor.datamodel.generator.SyntheticEntityGenerator&quot;])
@Serializable
@ModelEntityDetail
public data class OptionalDealParamDetail(
  /**
   * Детальная сущность, с иными сущностями имеющими на текущую внешний ключ
   */
  public override val origin: OptionalDealParamEntity,
) : IEntityDetail&lt;OptionalDealParamEntity&gt; {
  /**
   * Мета информация по сущности
   */
  public override val designEntityName: EntityEnum
    get() = EntityEnum.OptionalDealParam

  /**
   * Для опциональных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.
   */
  public override fun syntheticFieldOptional(entityName: EntityEnum):
      IEntityDetail&lt;out IEntityOrigin&gt;? = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found optional synthetic field for entity
        ${entityName}&quot;&quot;&quot;)
  }

  /**
   * Для обязательных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.
   */
  public override fun syntheticFieldMandatory(entityName: EntityEnum):
      IEntityDetail&lt;out IEntityOrigin&gt; = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory synthetic field for entity
        ${entityName}&quot;&quot;&quot;)
  }

  /**
   * Для сущностей имеющих связь, много к одному к текущей. По имени сущности имеющей fk на текущую
   * возвращает ее экземляр.
   */
  public override fun syntheticFieldSet(entityName: EntityEnum):
      Set&lt;IEntityDetail&lt;out IEntityOrigin&gt;&gt; = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory Set synthetic field for
        entity ${entityName}&quot;&quot;&quot;)
  }
}
&gt;
	at app//org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at app//org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at app//org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at app//org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)
	at app//org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)
	at app//org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1142)
	at app//ru.vood.processor.datamodel.abstraction.AbstractGeneratorTest.compareTextFile(AbstractGeneratorTest.kt:40)
	at app//ru.vood.processor.datamodel.generator.SyntheticEntityGeneratorTest.textFileTest(SyntheticEntityGeneratorTest.kt:36)
	at java.base@21.0.4/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base@21.0.4/java.lang.reflect.Method.invoke(Method.java:580)
	at app//org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)
	at app//org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestTemplateMethod(TimeoutExtension.java:94)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:226)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:204)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:142)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:110)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base@21.0.4/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base@21.0.4/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base@21.0.4/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base@21.0.4/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:110)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:44)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@21.0.4/java.util.ArrayList.forEach(ArrayList.java:1596)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@21.0.4/java.util.ArrayList.forEach(ArrayList.java:1596)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at app//org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at app//org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at app//org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:124)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:99)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:94)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:63)
	at java.base@21.0.4/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base@21.0.4/java.lang.reflect.Method.invoke(Method.java:580)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:92)
	at jdk.proxy1/jdk.proxy1.$Proxy4.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:200)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:132)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:103)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:63)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:121)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
</failure>
  </testcase>
  <testcase name="[7] TestCase(expectedClassFile=DealParamaggregateDetail)" classname="ru.vood.processor.datamodel.generator.SyntheticEntityGeneratorTest" time="0.003">
    <failure message="org.opentest4j.AssertionFailedError: expected: &lt;package ru.vood.dmgen.datamodel.sealedData&#10;&#10;import javax.`annotation`.processing.Generated&#10;import kotlin.collections.Set&#10;import kotlinx.serialization.Serializable&#10;import ru.vood.dmgen.`annotation`.ModelEntityDetail&#10;import ru.vood.dmgen.datamodel.sealedData.intf.IEntityDetail&#10;import ru.vood.dmgen.datamodel.sealedData.intf.IEntityOrigin&#10;import ru.vood.dmgen.datamodel.sealedData.metaEnum.EntityEnum&#10;&#10;/**&#10; * Параметр сделки, Агрегат&#10; */&#10;@Generated(value = [&quot;ru.vood.processor.datamodel.generator.SyntheticEntityGenerator&quot;])&#10;@Serializable&#10;@ModelEntityDetail&#10;public data class DealParamaggregateDetail(&#10;  /**&#10;   * Детальная сущность, с иными сущностями имеющими на текущую внешний ключ&#10;   */&#10;  public override val origin: DealParamaggregateEntity,&#10;) : IEntityDetail&lt;DealParamaggregateEntity&gt; {&#10;  /**&#10;   * Мета информация по сущности&#10;   */&#10;  public override val designEntityName: EntityEnum&#10;    get() = EntityEnum.DealParamaggregate&#10;&#10;  /**&#10;   * Для опциональных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldOptional(entityName: EntityEnum):&#10;      IEntityDetail&lt;out IEntityOrigin&gt;? = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found optional synthetic field for entity&#10;        ${entityName}&quot;&quot;&quot;)&#10;  }&#10;&#10;  /**&#10;   * Для обязательных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldMandatory(entityName: EntityEnum):&#10;      IEntityDetail&lt;out IEntityOrigin&gt; = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory synthetic field for entity&#10;        ${entityName}&quot;&quot;&quot;)&#10;  }&#10;&#10;  /**&#10;   * Для сущностей имеющих связь, много к одному к текущей. По имени сущности имеющей fk на текущую&#10;   * возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldSet(entityName: EntityEnum):&#10;      Set&lt;IEntityDetail&lt;out IEntityOrigin&gt;&gt; = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory Set synthetic field for&#10;        entity ${entityName}&quot;&quot;&quot;)&#10;  }&#10;}&#10;&gt; but was: &lt;package ru.vood.dmgen.datamodel.sealedData&#10;&#10;import javax.`annotation`.processing.Generated&#10;import kotlin.collections.Set&#10;import kotlinx.serialization.Serializable&#10;import ru.vood.dmgen.`annotation`.ModelEntityDetail&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.IEntityDetail&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.IEntityOrigin&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.metaEnum.EntityEnum&#10;&#10;/**&#10; * Параметр сделки, Агрегат&#10; */&#10;@Generated(value = [&quot;ru.vood.processor.datamodel.generator.SyntheticEntityGenerator&quot;])&#10;@Serializable&#10;@ModelEntityDetail&#10;public data class DealParamaggregateDetail(&#10;  /**&#10;   * Детальная сущность, с иными сущностями имеющими на текущую внешний ключ&#10;   */&#10;  public override val origin: DealParamaggregateEntity,&#10;) : IEntityDetail&lt;DealParamaggregateEntity&gt; {&#10;  /**&#10;   * Мета информация по сущности&#10;   */&#10;  public override val designEntityName: EntityEnum&#10;    get() = EntityEnum.DealParamaggregate&#10;&#10;  /**&#10;   * Для опциональных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldOptional(entityName: EntityEnum):&#10;      IEntityDetail&lt;out IEntityOrigin&gt;? = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found optional synthetic field for entity&#10;        ${entityName}&quot;&quot;&quot;)&#10;  }&#10;&#10;  /**&#10;   * Для обязательных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldMandatory(entityName: EntityEnum):&#10;      IEntityDetail&lt;out IEntityOrigin&gt; = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory synthetic field for entity&#10;        ${entityName}&quot;&quot;&quot;)&#10;  }&#10;&#10;  /**&#10;   * Для сущностей имеющих связь, много к одному к текущей. По имени сущности имеющей fk на текущую&#10;   * возвращает ее экземляр.&#10;   */&#10;  public override fun syntheticFieldSet(entityName: EntityEnum):&#10;      Set&lt;IEntityDetail&lt;out IEntityOrigin&gt;&gt; = when(entityName) {&#10;    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory Set synthetic field for&#10;        entity ${entityName}&quot;&quot;&quot;)&#10;  }&#10;}&#10;&gt;" type="org.opentest4j.AssertionFailedError">org.opentest4j.AssertionFailedError: expected: &lt;package ru.vood.dmgen.datamodel.sealedData

import javax.`annotation`.processing.Generated
import kotlin.collections.Set
import kotlinx.serialization.Serializable
import ru.vood.dmgen.`annotation`.ModelEntityDetail
import ru.vood.dmgen.datamodel.sealedData.intf.IEntityDetail
import ru.vood.dmgen.datamodel.sealedData.intf.IEntityOrigin
import ru.vood.dmgen.datamodel.sealedData.metaEnum.EntityEnum

/**
 * Параметр сделки, Агрегат
 */
@Generated(value = [&quot;ru.vood.processor.datamodel.generator.SyntheticEntityGenerator&quot;])
@Serializable
@ModelEntityDetail
public data class DealParamaggregateDetail(
  /**
   * Детальная сущность, с иными сущностями имеющими на текущую внешний ключ
   */
  public override val origin: DealParamaggregateEntity,
) : IEntityDetail&lt;DealParamaggregateEntity&gt; {
  /**
   * Мета информация по сущности
   */
  public override val designEntityName: EntityEnum
    get() = EntityEnum.DealParamaggregate

  /**
   * Для опциональных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.
   */
  public override fun syntheticFieldOptional(entityName: EntityEnum):
      IEntityDetail&lt;out IEntityOrigin&gt;? = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found optional synthetic field for entity
        ${entityName}&quot;&quot;&quot;)
  }

  /**
   * Для обязательных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.
   */
  public override fun syntheticFieldMandatory(entityName: EntityEnum):
      IEntityDetail&lt;out IEntityOrigin&gt; = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory synthetic field for entity
        ${entityName}&quot;&quot;&quot;)
  }

  /**
   * Для сущностей имеющих связь, много к одному к текущей. По имени сущности имеющей fk на текущую
   * возвращает ее экземляр.
   */
  public override fun syntheticFieldSet(entityName: EntityEnum):
      Set&lt;IEntityDetail&lt;out IEntityOrigin&gt;&gt; = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory Set synthetic field for
        entity ${entityName}&quot;&quot;&quot;)
  }
}
&gt; but was: &lt;package ru.vood.dmgen.datamodel.sealedData

import javax.`annotation`.processing.Generated
import kotlin.collections.Set
import kotlinx.serialization.Serializable
import ru.vood.dmgen.`annotation`.ModelEntityDetail
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.IEntityDetail
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.IEntityOrigin
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.metaEnum.EntityEnum

/**
 * Параметр сделки, Агрегат
 */
@Generated(value = [&quot;ru.vood.processor.datamodel.generator.SyntheticEntityGenerator&quot;])
@Serializable
@ModelEntityDetail
public data class DealParamaggregateDetail(
  /**
   * Детальная сущность, с иными сущностями имеющими на текущую внешний ключ
   */
  public override val origin: DealParamaggregateEntity,
) : IEntityDetail&lt;DealParamaggregateEntity&gt; {
  /**
   * Мета информация по сущности
   */
  public override val designEntityName: EntityEnum
    get() = EntityEnum.DealParamaggregate

  /**
   * Для опциональных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.
   */
  public override fun syntheticFieldOptional(entityName: EntityEnum):
      IEntityDetail&lt;out IEntityOrigin&gt;? = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found optional synthetic field for entity
        ${entityName}&quot;&quot;&quot;)
  }

  /**
   * Для обязательных сущностей. По имени сущности имеющей fk на текущую возвращает ее экземляр.
   */
  public override fun syntheticFieldMandatory(entityName: EntityEnum):
      IEntityDetail&lt;out IEntityOrigin&gt; = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory synthetic field for entity
        ${entityName}&quot;&quot;&quot;)
  }

  /**
   * Для сущностей имеющих связь, много к одному к текущей. По имени сущности имеющей fk на текущую
   * возвращает ее экземляр.
   */
  public override fun syntheticFieldSet(entityName: EntityEnum):
      Set&lt;IEntityDetail&lt;out IEntityOrigin&gt;&gt; = when(entityName) {
    else -&gt; error(&quot;&quot;&quot;In Entity ${designEntityName} Not found mandatory Set synthetic field for
        entity ${entityName}&quot;&quot;&quot;)
  }
}
&gt;
	at app//org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at app//org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at app//org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at app//org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)
	at app//org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)
	at app//org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1142)
	at app//ru.vood.processor.datamodel.abstraction.AbstractGeneratorTest.compareTextFile(AbstractGeneratorTest.kt:40)
	at app//ru.vood.processor.datamodel.generator.SyntheticEntityGeneratorTest.textFileTest(SyntheticEntityGeneratorTest.kt:36)
	at java.base@21.0.4/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base@21.0.4/java.lang.reflect.Method.invoke(Method.java:580)
	at app//org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)
	at app//org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestTemplateMethod(TimeoutExtension.java:94)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:226)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:204)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:142)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:110)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base@21.0.4/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base@21.0.4/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base@21.0.4/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base@21.0.4/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:110)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:44)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@21.0.4/java.util.ArrayList.forEach(ArrayList.java:1596)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@21.0.4/java.util.ArrayList.forEach(ArrayList.java:1596)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at app//org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at app//org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at app//org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:124)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:99)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:94)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:63)
	at java.base@21.0.4/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base@21.0.4/java.lang.reflect.Method.invoke(Method.java:580)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:92)
	at jdk.proxy1/jdk.proxy1.$Proxy4.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:200)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:132)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:103)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:63)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:121)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
</failure>
  </testcase>
  <system-out><![CDATA[]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
