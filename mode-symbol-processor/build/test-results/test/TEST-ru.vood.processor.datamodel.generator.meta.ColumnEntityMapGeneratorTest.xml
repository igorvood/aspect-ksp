<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="ru.vood.processor.datamodel.generator.meta.ColumnEntityMapGeneratorTest" tests="2" skipped="0" failures="1" errors="0" timestamp="2025-08-25T13:39:56.419Z" hostname="vood" time="0.008">
  <properties/>
  <testcase name="compareTestedFiles()" classname="ru.vood.processor.datamodel.generator.meta.ColumnEntityMapGeneratorTest" time="0.0"/>
  <testcase name="[1] TestCase(expectedClassFile=FullColumnNameEnum)" classname="ru.vood.processor.datamodel.generator.meta.ColumnEntityMapGeneratorTest" time="0.007">
    <failure message="org.opentest4j.AssertionFailedError: expected: &lt;package test.metaEnum&#10;&#10;import java.util.EnumMap&#10;import javax.`annotation`.processing.Generated&#10;import kotlin.Int&#10;import kotlin.String&#10;import ru.vood.dmgen.`annotation`.MetaColumns&#10;import ru.vood.dmgen.datamodel.sealedData.Deal&#10;import ru.vood.dmgen.datamodel.sealedData.DealDetail&#10;import ru.vood.dmgen.datamodel.sealedData.DealEntity&#10;import ru.vood.dmgen.datamodel.sealedData.DealParamaggregate&#10;import ru.vood.dmgen.datamodel.sealedData.NoFKAndUk&#10;import ru.vood.dmgen.datamodel.sealedData.NoFKAndUkEntity&#10;import ru.vood.dmgen.datamodel.sealedData.OptionalDealParam&#10;import ru.vood.dmgen.datamodel.sealedData.OptionalDealParamEntity&#10;import ru.vood.dmgen.datamodel.sealedData.intf.ColumnEntityData&#10;import ru.vood.dmgen.datamodel.sealedData.intf.SimpleColExtractFunction&#10;import ru.vood.dmgen.datamodel.sealedData.intf.SimpleColumnEntityData&#10;import ru.vood.dmgen.datamodel.sealedData.intf.Synthetic&#10;import ru.vood.dmgen.datamodel.sealedData.intf.SyntheticColumnEntityData&#10;import ru.vood.dmgen.datamodel.sealedData.intf.SyntheticSet&#10;import ru.vood.dmgen.datamodel.sealedData.metaEnum.EntityEnum&#10;import ru.vood.dmgen.datamodel.sealedData.oneOf.DealOneData&#10;import ru.vood.dmgen.datamodel.sealedData.oneOf.DealTwoData&#10;import ru.vood.dmgen.datamodel.sealedData.oneOf.OneOfDto&#10;import ru.vood.dmgen.datamodel.sealedData.oneOf.OneOfDtoEntity&#10;import ru.vood.dmgen.datamodel.valueClasses.DealId&#10;import ru.vood.dmgen.dto.SimpleColumnName&#10;import ru.vood.dmgen.dto.SimpleColumnType&#10;&#10;@Generated(value = [&quot;ru.vood.processor.datamodel.generator.meta.ColumnEntityMapGenerator&quot;])&#10;@MetaColumns&#10;public enum class FullColumnNameEnum {&#10;  Deal_id,&#10;  Deal_noFKAndUk,&#10;  Deal_optionalDealParam,&#10;  Deal_oneOfDto,&#10;  DealOneData_dealId,&#10;  DealOneData_one,&#10;  DealParamaggregate_dealId,&#10;  DealTwoData_dealId,&#10;  DealTwoData_two,&#10;  NoFKAndUk_dealId,&#10;  OneOfDto_dealId,&#10;  OptionalDealParam_dealId,&#10;  OptionalDealParam_paramId,&#10;  ;&#10;&#10;  public fun columnData() = columnEntityDataMap[this]!!&#10;&#10;  public companion object {&#10;    private val columnEntityDataMap:&#10;        EnumMap&lt;ru.vood.dmgen.datamodel.sealedData.metaEnum.FullColumnNameEnum, ColumnEntityData&gt; =&#10;        EnumMap(&#10;            mapOf(&#10;                  Deal_id to SimpleColumnEntityData(&#10;                      entity = EntityEnum.Deal,&#10;                      simpleColumnName = SimpleColumnName(&quot;id&quot;),&#10;                      isOptional = false,&#10;                      comment = &quot;Это ее идентификатор&quot;,&#10;                      iColExtractFunction = SimpleColExtractFunction&lt;Deal, DealId&gt; { it.id },&#10;                      simpleColumnType =&#10;                          SimpleColumnType(&quot;ru.vood.dmgen.datamodel.valueClasses.DealId&quot;)),&#10;                  Deal_noFKAndUk to SyntheticColumnEntityData(&#10;                  entity = EntityEnum.Deal,&#10;                  outEntity = EntityEnum.NoFKAndUk,&#10;                  simpleColumnName = SimpleColumnName(&quot;noFKAndUk&quot;),&#10;                  isOptional = false,&#10;                  comment = &quot;Параметр сделки, отношение к сделке один к одному&quot;,&#10;                  iColExtractFunction = SyntheticSet&lt;DealEntity, DealDetail,&#10;                      NoFKAndUkEntity&gt;{it.noFKAndUk},&#10;                  ),&#10;                  Deal_optionalDealParam to SyntheticColumnEntityData(&#10;                  entity = EntityEnum.Deal,&#10;                  outEntity = EntityEnum.OptionalDealParam,&#10;                  simpleColumnName = SimpleColumnName(&quot;optionalDealParam&quot;),&#10;                  isOptional = true,&#10;                  comment = &quot;Параметр сделки, отношение к сделке один к одному, опциональный&quot;,&#10;                  iColExtractFunction = Synthetic&lt;DealEntity, DealDetail,&#10;                      OptionalDealParamEntity&gt;{it.optionalDealParam?.let{q-&gt;setOf(q)}?:setOf()},&#10;                  ),&#10;                  Deal_oneOfDto to SyntheticColumnEntityData(&#10;                  entity = EntityEnum.Deal,&#10;                  outEntity = EntityEnum.OneOfDto,&#10;                  simpleColumnName = SimpleColumnName(&quot;oneOfDto&quot;),&#10;                  isOptional = false,&#10;                  comment = &quot;Параметр сделки, отношение к сделке один к одному&quot;,&#10;                  iColExtractFunction = Synthetic&lt;DealEntity, DealDetail, OneOfDtoEntity&gt;&#10;                      {setOf(it.oneOfDto)},&#10;                  ),&#10;                  DealOneData_dealId to SimpleColumnEntityData(&#10;                      entity = EntityEnum.DealOneData,&#10;                      simpleColumnName = SimpleColumnName(&quot;dealId&quot;),&#10;                      isOptional = false,&#10;                      comment = &quot;Это ее идентификатор&quot;,&#10;                      iColExtractFunction = SimpleColExtractFunction&lt;DealOneData, DealId&gt; {&#10;                          it.dealId },&#10;                      simpleColumnType =&#10;                          SimpleColumnType(&quot;ru.vood.dmgen.datamodel.valueClasses.DealId&quot;)),&#10;                  DealOneData_one to SimpleColumnEntityData(&#10;                      entity = EntityEnum.DealOneData,&#10;                      simpleColumnName = SimpleColumnName(&quot;one&quot;),&#10;                      isOptional = false,&#10;                      comment = &quot;Параметр сделки, отношение к сделке один к одному&quot;,&#10;                      iColExtractFunction = SimpleColExtractFunction&lt;DealOneData, String&gt; { it.one&#10;                          },&#10;                      simpleColumnType = SimpleColumnType(&quot;kotlin.String&quot;)),&#10;                  DealParamaggregate_dealId to SimpleColumnEntityData(&#10;                      entity = EntityEnum.DealParamaggregate,&#10;                      simpleColumnName = SimpleColumnName(&quot;dealId&quot;),&#10;                      isOptional = false,&#10;                      comment = &quot;Идентификатор сделки&quot;,&#10;                      iColExtractFunction = SimpleColExtractFunction&lt;DealParamaggregate, DealId&gt; {&#10;                          it.dealId },&#10;                      simpleColumnType =&#10;                          SimpleColumnType(&quot;ru.vood.dmgen.datamodel.valueClasses.DealId&quot;)),&#10;                  DealTwoData_dealId to SimpleColumnEntityData(&#10;                      entity = EntityEnum.DealTwoData,&#10;                      simpleColumnName = SimpleColumnName(&quot;dealId&quot;),&#10;                      isOptional = false,&#10;                      comment = &quot;Это ее идентификатор&quot;,&#10;                      iColExtractFunction = SimpleColExtractFunction&lt;DealTwoData, DealId&gt; {&#10;                          it.dealId },&#10;                      simpleColumnType =&#10;                          SimpleColumnType(&quot;ru.vood.dmgen.datamodel.valueClasses.DealId&quot;)),&#10;                  DealTwoData_two to SimpleColumnEntityData(&#10;                      entity = EntityEnum.DealTwoData,&#10;                      simpleColumnName = SimpleColumnName(&quot;two&quot;),&#10;                      isOptional = true,&#10;                      comment = &quot;Параметр сделки, отношение к сделке один к одному&quot;,&#10;                      iColExtractFunction = SimpleColExtractFunction&lt;DealTwoData, String&gt; { it.two&#10;                          },&#10;                      simpleColumnType = SimpleColumnType(&quot;kotlin.String&quot;)),&#10;                  NoFKAndUk_dealId to SimpleColumnEntityData(&#10;                      entity = EntityEnum.NoFKAndUk,&#10;                      simpleColumnName = SimpleColumnName(&quot;dealId&quot;),&#10;                      isOptional = false,&#10;                      comment = &quot;Параметр сделки, отношение к сделке один к одному&quot;,&#10;                      iColExtractFunction = SimpleColExtractFunction&lt;NoFKAndUk, DealId&gt; { it.dealId&#10;                          },&#10;                      simpleColumnType =&#10;                          SimpleColumnType(&quot;ru.vood.dmgen.datamodel.valueClasses.DealId&quot;)),&#10;                  OneOfDto_dealId to SimpleColumnEntityData(&#10;                      entity = EntityEnum.OneOfDto,&#10;                      simpleColumnName = SimpleColumnName(&quot;dealId&quot;),&#10;                      isOptional = false,&#10;                      comment = &quot;Параметр сделки, отношение к сделке один к одному&quot;,&#10;                      iColExtractFunction = SimpleColExtractFunction&lt;OneOfDto, DealId&gt; { it.dealId&#10;                          },&#10;                      simpleColumnType =&#10;                          SimpleColumnType(&quot;ru.vood.dmgen.datamodel.valueClasses.DealId&quot;)),&#10;                  OptionalDealParam_dealId to SimpleColumnEntityData(&#10;                      entity = EntityEnum.OptionalDealParam,&#10;                      simpleColumnName = SimpleColumnName(&quot;dealId&quot;),&#10;                      isOptional = false,&#10;                      comment = &quot;Идентификатор сделки&quot;,&#10;                      iColExtractFunction = SimpleColExtractFunction&lt;OptionalDealParam, DealId&gt; {&#10;                          it.dealId },&#10;                      simpleColumnType =&#10;                          SimpleColumnType(&quot;ru.vood.dmgen.datamodel.valueClasses.DealId&quot;)),&#10;                  OptionalDealParam_paramId to SimpleColumnEntityData(&#10;                      entity = EntityEnum.OptionalDealParam,&#10;                      simpleColumnName = SimpleColumnName(&quot;paramId&quot;),&#10;                      isOptional = false,&#10;                      comment = &quot;Идентификатор параметра&quot;,&#10;                      iColExtractFunction = SimpleColExtractFunction&lt;OptionalDealParam, Int&gt; {&#10;                          it.paramId },&#10;                      simpleColumnType = SimpleColumnType(&quot;kotlin.Int&quot;)),&#10;                  )&#10;                  )&#10;&#10;                }&#10;              }&#10;&gt; but was: &lt;package test.metaEnum&#10;&#10;import java.util.EnumMap&#10;import javax.`annotation`.processing.Generated&#10;import kotlin.Int&#10;import kotlin.String&#10;import ru.vood.dmgen.`annotation`.MetaColumns&#10;import ru.vood.dmgen.datamodel.sealedData.Deal&#10;import ru.vood.dmgen.datamodel.sealedData.DealDetail&#10;import ru.vood.dmgen.datamodel.sealedData.DealEntity&#10;import ru.vood.dmgen.datamodel.sealedData.DealParamaggregate&#10;import ru.vood.dmgen.datamodel.sealedData.NoFKAndUk&#10;import ru.vood.dmgen.datamodel.sealedData.NoFKAndUkEntity&#10;import ru.vood.dmgen.datamodel.sealedData.OptionalDealParam&#10;import ru.vood.dmgen.datamodel.sealedData.OptionalDealParamEntity&#10;import ru.vood.dmgen.datamodel.sealedData.oneOf.DealOneData&#10;import ru.vood.dmgen.datamodel.sealedData.oneOf.DealTwoData&#10;import ru.vood.dmgen.datamodel.sealedData.oneOf.OneOfDto&#10;import ru.vood.dmgen.datamodel.sealedData.oneOf.OneOfDtoEntity&#10;import ru.vood.dmgen.datamodel.valueClasses.DealId&#10;import ru.vood.dmgen.dto.SimpleColumnName&#10;import ru.vood.dmgen.dto.SimpleColumnType&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.ColumnEntityData&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.SimpleColExtractFunction&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.SimpleColumnEntityData&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.Synthetic&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.SyntheticColumnEntityData&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.SyntheticSet&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.metaEnum.EntityEnum&#10;&#10;@Generated(value = [&quot;ru.vood.processor.datamodel.generator.meta.ColumnEntityMapGenerator&quot;])&#10;@MetaColumns&#10;public enum class FullColumnNameEnum {&#10;  Deal_id,&#10;  Deal_noFKAndUk,&#10;  Deal_optionalDealParam,&#10;  Deal_oneOfDto,&#10;  DealOneData_dealId,&#10;  DealOneData_one,&#10;  DealParamaggregate_dealId,&#10;  DealTwoData_dealId,&#10;  DealTwoData_two,&#10;  NoFKAndUk_dealId,&#10;  OneOfDto_dealId,&#10;  OptionalDealParam_dealId,&#10;  OptionalDealParam_paramId,&#10;  ;&#10;&#10;  public fun columnData() = columnEntityDataMap[this]!!&#10;&#10;  public companion object {&#10;    private val columnEntityDataMap:&#10;        EnumMap&lt;ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.metaEnum.FullColumnNameEnum, ColumnEntityData&gt;&#10;        = EnumMap(&#10;            mapOf(&#10;                  Deal_id to SimpleColumnEntityData(&#10;                      entity = EntityEnum.Deal,&#10;                      simpleColumnName = SimpleColumnName(&quot;id&quot;),&#10;                      isOptional = false,&#10;                      comment = &quot;Это ее идентификатор&quot;,&#10;                      iColExtractFunction = SimpleColExtractFunction&lt;Deal, DealId&gt; { it.id },&#10;                      simpleColumnType =&#10;                          SimpleColumnType(&quot;ru.vood.dmgen.datamodel.valueClasses.DealId&quot;)),&#10;                  Deal_noFKAndUk to SyntheticColumnEntityData(&#10;                  entity = EntityEnum.Deal,&#10;                  outEntity = EntityEnum.NoFKAndUk,&#10;                  simpleColumnName = SimpleColumnName(&quot;noFKAndUk&quot;),&#10;                  isOptional = false,&#10;                  comment = &quot;Параметр сделки, отношение к сделке один к одному&quot;,&#10;                  iColExtractFunction = SyntheticSet&lt;DealEntity, DealDetail,&#10;                      NoFKAndUkEntity&gt;{it.noFKAndUk},&#10;                  ),&#10;                  Deal_optionalDealParam to SyntheticColumnEntityData(&#10;                  entity = EntityEnum.Deal,&#10;                  outEntity = EntityEnum.OptionalDealParam,&#10;                  simpleColumnName = SimpleColumnName(&quot;optionalDealParam&quot;),&#10;                  isOptional = true,&#10;                  comment = &quot;Параметр сделки, отношение к сделке один к одному, опциональный&quot;,&#10;                  iColExtractFunction = Synthetic&lt;DealEntity, DealDetail,&#10;                      OptionalDealParamEntity&gt;{it.optionalDealParam?.let{q-&gt;setOf(q)}?:setOf()},&#10;                  ),&#10;                  Deal_oneOfDto to SyntheticColumnEntityData(&#10;                  entity = EntityEnum.Deal,&#10;                  outEntity = EntityEnum.OneOfDto,&#10;                  simpleColumnName = SimpleColumnName(&quot;oneOfDto&quot;),&#10;                  isOptional = false,&#10;                  comment = &quot;Параметр сделки, отношение к сделке один к одному&quot;,&#10;                  iColExtractFunction = Synthetic&lt;DealEntity, DealDetail, OneOfDtoEntity&gt;&#10;                      {setOf(it.oneOfDto)},&#10;                  ),&#10;                  DealOneData_dealId to SimpleColumnEntityData(&#10;                      entity = EntityEnum.DealOneData,&#10;                      simpleColumnName = SimpleColumnName(&quot;dealId&quot;),&#10;                      isOptional = false,&#10;                      comment = &quot;Это ее идентификатор&quot;,&#10;                      iColExtractFunction = SimpleColExtractFunction&lt;DealOneData, DealId&gt; {&#10;                          it.dealId },&#10;                      simpleColumnType =&#10;                          SimpleColumnType(&quot;ru.vood.dmgen.datamodel.valueClasses.DealId&quot;)),&#10;                  DealOneData_one to SimpleColumnEntityData(&#10;                      entity = EntityEnum.DealOneData,&#10;                      simpleColumnName = SimpleColumnName(&quot;one&quot;),&#10;                      isOptional = false,&#10;                      comment = &quot;Параметр сделки, отношение к сделке один к одному&quot;,&#10;                      iColExtractFunction = SimpleColExtractFunction&lt;DealOneData, String&gt; { it.one&#10;                          },&#10;                      simpleColumnType = SimpleColumnType(&quot;kotlin.String&quot;)),&#10;                  DealParamaggregate_dealId to SimpleColumnEntityData(&#10;                      entity = EntityEnum.DealParamaggregate,&#10;                      simpleColumnName = SimpleColumnName(&quot;dealId&quot;),&#10;                      isOptional = false,&#10;                      comment = &quot;Идентификатор сделки&quot;,&#10;                      iColExtractFunction = SimpleColExtractFunction&lt;DealParamaggregate, DealId&gt; {&#10;                          it.dealId },&#10;                      simpleColumnType =&#10;                          SimpleColumnType(&quot;ru.vood.dmgen.datamodel.valueClasses.DealId&quot;)),&#10;                  DealTwoData_dealId to SimpleColumnEntityData(&#10;                      entity = EntityEnum.DealTwoData,&#10;                      simpleColumnName = SimpleColumnName(&quot;dealId&quot;),&#10;                      isOptional = false,&#10;                      comment = &quot;Это ее идентификатор&quot;,&#10;                      iColExtractFunction = SimpleColExtractFunction&lt;DealTwoData, DealId&gt; {&#10;                          it.dealId },&#10;                      simpleColumnType =&#10;                          SimpleColumnType(&quot;ru.vood.dmgen.datamodel.valueClasses.DealId&quot;)),&#10;                  DealTwoData_two to SimpleColumnEntityData(&#10;                      entity = EntityEnum.DealTwoData,&#10;                      simpleColumnName = SimpleColumnName(&quot;two&quot;),&#10;                      isOptional = true,&#10;                      comment = &quot;Параметр сделки, отношение к сделке один к одному&quot;,&#10;                      iColExtractFunction = SimpleColExtractFunction&lt;DealTwoData, String&gt; { it.two&#10;                          },&#10;                      simpleColumnType = SimpleColumnType(&quot;kotlin.String&quot;)),&#10;                  NoFKAndUk_dealId to SimpleColumnEntityData(&#10;                      entity = EntityEnum.NoFKAndUk,&#10;                      simpleColumnName = SimpleColumnName(&quot;dealId&quot;),&#10;                      isOptional = false,&#10;                      comment = &quot;Параметр сделки, отношение к сделке один к одному&quot;,&#10;                      iColExtractFunction = SimpleColExtractFunction&lt;NoFKAndUk, DealId&gt; { it.dealId&#10;                          },&#10;                      simpleColumnType =&#10;                          SimpleColumnType(&quot;ru.vood.dmgen.datamodel.valueClasses.DealId&quot;)),&#10;                  OneOfDto_dealId to SimpleColumnEntityData(&#10;                      entity = EntityEnum.OneOfDto,&#10;                      simpleColumnName = SimpleColumnName(&quot;dealId&quot;),&#10;                      isOptional = false,&#10;                      comment = &quot;Параметр сделки, отношение к сделке один к одному&quot;,&#10;                      iColExtractFunction = SimpleColExtractFunction&lt;OneOfDto, DealId&gt; { it.dealId&#10;                          },&#10;                      simpleColumnType =&#10;                          SimpleColumnType(&quot;ru.vood.dmgen.datamodel.valueClasses.DealId&quot;)),&#10;                  OptionalDealParam_dealId to SimpleColumnEntityData(&#10;                      entity = EntityEnum.OptionalDealParam,&#10;                      simpleColumnName = SimpleColumnName(&quot;dealId&quot;),&#10;                      isOptional = false,&#10;                      comment = &quot;Идентификатор сделки&quot;,&#10;                      iColExtractFunction = SimpleColExtractFunction&lt;OptionalDealParam, DealId&gt; {&#10;                          it.dealId },&#10;                      simpleColumnType =&#10;                          SimpleColumnType(&quot;ru.vood.dmgen.datamodel.valueClasses.DealId&quot;)),&#10;                  OptionalDealParam_paramId to SimpleColumnEntityData(&#10;                      entity = EntityEnum.OptionalDealParam,&#10;                      simpleColumnName = SimpleColumnName(&quot;paramId&quot;),&#10;                      isOptional = false,&#10;                      comment = &quot;Идентификатор параметра&quot;,&#10;                      iColExtractFunction = SimpleColExtractFunction&lt;OptionalDealParam, Int&gt; {&#10;                          it.paramId },&#10;                      simpleColumnType = SimpleColumnType(&quot;kotlin.Int&quot;)),&#10;                  )&#10;                  )&#10;&#10;                }&#10;              }&#10;&gt;" type="org.opentest4j.AssertionFailedError">org.opentest4j.AssertionFailedError: expected: &lt;package test.metaEnum

import java.util.EnumMap
import javax.`annotation`.processing.Generated
import kotlin.Int
import kotlin.String
import ru.vood.dmgen.`annotation`.MetaColumns
import ru.vood.dmgen.datamodel.sealedData.Deal
import ru.vood.dmgen.datamodel.sealedData.DealDetail
import ru.vood.dmgen.datamodel.sealedData.DealEntity
import ru.vood.dmgen.datamodel.sealedData.DealParamaggregate
import ru.vood.dmgen.datamodel.sealedData.NoFKAndUk
import ru.vood.dmgen.datamodel.sealedData.NoFKAndUkEntity
import ru.vood.dmgen.datamodel.sealedData.OptionalDealParam
import ru.vood.dmgen.datamodel.sealedData.OptionalDealParamEntity
import ru.vood.dmgen.datamodel.sealedData.intf.ColumnEntityData
import ru.vood.dmgen.datamodel.sealedData.intf.SimpleColExtractFunction
import ru.vood.dmgen.datamodel.sealedData.intf.SimpleColumnEntityData
import ru.vood.dmgen.datamodel.sealedData.intf.Synthetic
import ru.vood.dmgen.datamodel.sealedData.intf.SyntheticColumnEntityData
import ru.vood.dmgen.datamodel.sealedData.intf.SyntheticSet
import ru.vood.dmgen.datamodel.sealedData.metaEnum.EntityEnum
import ru.vood.dmgen.datamodel.sealedData.oneOf.DealOneData
import ru.vood.dmgen.datamodel.sealedData.oneOf.DealTwoData
import ru.vood.dmgen.datamodel.sealedData.oneOf.OneOfDto
import ru.vood.dmgen.datamodel.sealedData.oneOf.OneOfDtoEntity
import ru.vood.dmgen.datamodel.valueClasses.DealId
import ru.vood.dmgen.dto.SimpleColumnName
import ru.vood.dmgen.dto.SimpleColumnType

@Generated(value = [&quot;ru.vood.processor.datamodel.generator.meta.ColumnEntityMapGenerator&quot;])
@MetaColumns
public enum class FullColumnNameEnum {
  Deal_id,
  Deal_noFKAndUk,
  Deal_optionalDealParam,
  Deal_oneOfDto,
  DealOneData_dealId,
  DealOneData_one,
  DealParamaggregate_dealId,
  DealTwoData_dealId,
  DealTwoData_two,
  NoFKAndUk_dealId,
  OneOfDto_dealId,
  OptionalDealParam_dealId,
  OptionalDealParam_paramId,
  ;

  public fun columnData() = columnEntityDataMap[this]!!

  public companion object {
    private val columnEntityDataMap:
        EnumMap&lt;ru.vood.dmgen.datamodel.sealedData.metaEnum.FullColumnNameEnum, ColumnEntityData&gt; =
        EnumMap(
            mapOf(
                  Deal_id to SimpleColumnEntityData(
                      entity = EntityEnum.Deal,
                      simpleColumnName = SimpleColumnName(&quot;id&quot;),
                      isOptional = false,
                      comment = &quot;Это ее идентификатор&quot;,
                      iColExtractFunction = SimpleColExtractFunction&lt;Deal, DealId&gt; { it.id },
                      simpleColumnType =
                          SimpleColumnType(&quot;ru.vood.dmgen.datamodel.valueClasses.DealId&quot;)),
                  Deal_noFKAndUk to SyntheticColumnEntityData(
                  entity = EntityEnum.Deal,
                  outEntity = EntityEnum.NoFKAndUk,
                  simpleColumnName = SimpleColumnName(&quot;noFKAndUk&quot;),
                  isOptional = false,
                  comment = &quot;Параметр сделки, отношение к сделке один к одному&quot;,
                  iColExtractFunction = SyntheticSet&lt;DealEntity, DealDetail,
                      NoFKAndUkEntity&gt;{it.noFKAndUk},
                  ),
                  Deal_optionalDealParam to SyntheticColumnEntityData(
                  entity = EntityEnum.Deal,
                  outEntity = EntityEnum.OptionalDealParam,
                  simpleColumnName = SimpleColumnName(&quot;optionalDealParam&quot;),
                  isOptional = true,
                  comment = &quot;Параметр сделки, отношение к сделке один к одному, опциональный&quot;,
                  iColExtractFunction = Synthetic&lt;DealEntity, DealDetail,
                      OptionalDealParamEntity&gt;{it.optionalDealParam?.let{q-&gt;setOf(q)}?:setOf()},
                  ),
                  Deal_oneOfDto to SyntheticColumnEntityData(
                  entity = EntityEnum.Deal,
                  outEntity = EntityEnum.OneOfDto,
                  simpleColumnName = SimpleColumnName(&quot;oneOfDto&quot;),
                  isOptional = false,
                  comment = &quot;Параметр сделки, отношение к сделке один к одному&quot;,
                  iColExtractFunction = Synthetic&lt;DealEntity, DealDetail, OneOfDtoEntity&gt;
                      {setOf(it.oneOfDto)},
                  ),
                  DealOneData_dealId to SimpleColumnEntityData(
                      entity = EntityEnum.DealOneData,
                      simpleColumnName = SimpleColumnName(&quot;dealId&quot;),
                      isOptional = false,
                      comment = &quot;Это ее идентификатор&quot;,
                      iColExtractFunction = SimpleColExtractFunction&lt;DealOneData, DealId&gt; {
                          it.dealId },
                      simpleColumnType =
                          SimpleColumnType(&quot;ru.vood.dmgen.datamodel.valueClasses.DealId&quot;)),
                  DealOneData_one to SimpleColumnEntityData(
                      entity = EntityEnum.DealOneData,
                      simpleColumnName = SimpleColumnName(&quot;one&quot;),
                      isOptional = false,
                      comment = &quot;Параметр сделки, отношение к сделке один к одному&quot;,
                      iColExtractFunction = SimpleColExtractFunction&lt;DealOneData, String&gt; { it.one
                          },
                      simpleColumnType = SimpleColumnType(&quot;kotlin.String&quot;)),
                  DealParamaggregate_dealId to SimpleColumnEntityData(
                      entity = EntityEnum.DealParamaggregate,
                      simpleColumnName = SimpleColumnName(&quot;dealId&quot;),
                      isOptional = false,
                      comment = &quot;Идентификатор сделки&quot;,
                      iColExtractFunction = SimpleColExtractFunction&lt;DealParamaggregate, DealId&gt; {
                          it.dealId },
                      simpleColumnType =
                          SimpleColumnType(&quot;ru.vood.dmgen.datamodel.valueClasses.DealId&quot;)),
                  DealTwoData_dealId to SimpleColumnEntityData(
                      entity = EntityEnum.DealTwoData,
                      simpleColumnName = SimpleColumnName(&quot;dealId&quot;),
                      isOptional = false,
                      comment = &quot;Это ее идентификатор&quot;,
                      iColExtractFunction = SimpleColExtractFunction&lt;DealTwoData, DealId&gt; {
                          it.dealId },
                      simpleColumnType =
                          SimpleColumnType(&quot;ru.vood.dmgen.datamodel.valueClasses.DealId&quot;)),
                  DealTwoData_two to SimpleColumnEntityData(
                      entity = EntityEnum.DealTwoData,
                      simpleColumnName = SimpleColumnName(&quot;two&quot;),
                      isOptional = true,
                      comment = &quot;Параметр сделки, отношение к сделке один к одному&quot;,
                      iColExtractFunction = SimpleColExtractFunction&lt;DealTwoData, String&gt; { it.two
                          },
                      simpleColumnType = SimpleColumnType(&quot;kotlin.String&quot;)),
                  NoFKAndUk_dealId to SimpleColumnEntityData(
                      entity = EntityEnum.NoFKAndUk,
                      simpleColumnName = SimpleColumnName(&quot;dealId&quot;),
                      isOptional = false,
                      comment = &quot;Параметр сделки, отношение к сделке один к одному&quot;,
                      iColExtractFunction = SimpleColExtractFunction&lt;NoFKAndUk, DealId&gt; { it.dealId
                          },
                      simpleColumnType =
                          SimpleColumnType(&quot;ru.vood.dmgen.datamodel.valueClasses.DealId&quot;)),
                  OneOfDto_dealId to SimpleColumnEntityData(
                      entity = EntityEnum.OneOfDto,
                      simpleColumnName = SimpleColumnName(&quot;dealId&quot;),
                      isOptional = false,
                      comment = &quot;Параметр сделки, отношение к сделке один к одному&quot;,
                      iColExtractFunction = SimpleColExtractFunction&lt;OneOfDto, DealId&gt; { it.dealId
                          },
                      simpleColumnType =
                          SimpleColumnType(&quot;ru.vood.dmgen.datamodel.valueClasses.DealId&quot;)),
                  OptionalDealParam_dealId to SimpleColumnEntityData(
                      entity = EntityEnum.OptionalDealParam,
                      simpleColumnName = SimpleColumnName(&quot;dealId&quot;),
                      isOptional = false,
                      comment = &quot;Идентификатор сделки&quot;,
                      iColExtractFunction = SimpleColExtractFunction&lt;OptionalDealParam, DealId&gt; {
                          it.dealId },
                      simpleColumnType =
                          SimpleColumnType(&quot;ru.vood.dmgen.datamodel.valueClasses.DealId&quot;)),
                  OptionalDealParam_paramId to SimpleColumnEntityData(
                      entity = EntityEnum.OptionalDealParam,
                      simpleColumnName = SimpleColumnName(&quot;paramId&quot;),
                      isOptional = false,
                      comment = &quot;Идентификатор параметра&quot;,
                      iColExtractFunction = SimpleColExtractFunction&lt;OptionalDealParam, Int&gt; {
                          it.paramId },
                      simpleColumnType = SimpleColumnType(&quot;kotlin.Int&quot;)),
                  )
                  )

                }
              }
&gt; but was: &lt;package test.metaEnum

import java.util.EnumMap
import javax.`annotation`.processing.Generated
import kotlin.Int
import kotlin.String
import ru.vood.dmgen.`annotation`.MetaColumns
import ru.vood.dmgen.datamodel.sealedData.Deal
import ru.vood.dmgen.datamodel.sealedData.DealDetail
import ru.vood.dmgen.datamodel.sealedData.DealEntity
import ru.vood.dmgen.datamodel.sealedData.DealParamaggregate
import ru.vood.dmgen.datamodel.sealedData.NoFKAndUk
import ru.vood.dmgen.datamodel.sealedData.NoFKAndUkEntity
import ru.vood.dmgen.datamodel.sealedData.OptionalDealParam
import ru.vood.dmgen.datamodel.sealedData.OptionalDealParamEntity
import ru.vood.dmgen.datamodel.sealedData.oneOf.DealOneData
import ru.vood.dmgen.datamodel.sealedData.oneOf.DealTwoData
import ru.vood.dmgen.datamodel.sealedData.oneOf.OneOfDto
import ru.vood.dmgen.datamodel.sealedData.oneOf.OneOfDtoEntity
import ru.vood.dmgen.datamodel.valueClasses.DealId
import ru.vood.dmgen.dto.SimpleColumnName
import ru.vood.dmgen.dto.SimpleColumnType
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.ColumnEntityData
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.SimpleColExtractFunction
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.SimpleColumnEntityData
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.Synthetic
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.SyntheticColumnEntityData
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.SyntheticSet
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.metaEnum.EntityEnum

@Generated(value = [&quot;ru.vood.processor.datamodel.generator.meta.ColumnEntityMapGenerator&quot;])
@MetaColumns
public enum class FullColumnNameEnum {
  Deal_id,
  Deal_noFKAndUk,
  Deal_optionalDealParam,
  Deal_oneOfDto,
  DealOneData_dealId,
  DealOneData_one,
  DealParamaggregate_dealId,
  DealTwoData_dealId,
  DealTwoData_two,
  NoFKAndUk_dealId,
  OneOfDto_dealId,
  OptionalDealParam_dealId,
  OptionalDealParam_paramId,
  ;

  public fun columnData() = columnEntityDataMap[this]!!

  public companion object {
    private val columnEntityDataMap:
        EnumMap&lt;ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.metaEnum.FullColumnNameEnum, ColumnEntityData&gt;
        = EnumMap(
            mapOf(
                  Deal_id to SimpleColumnEntityData(
                      entity = EntityEnum.Deal,
                      simpleColumnName = SimpleColumnName(&quot;id&quot;),
                      isOptional = false,
                      comment = &quot;Это ее идентификатор&quot;,
                      iColExtractFunction = SimpleColExtractFunction&lt;Deal, DealId&gt; { it.id },
                      simpleColumnType =
                          SimpleColumnType(&quot;ru.vood.dmgen.datamodel.valueClasses.DealId&quot;)),
                  Deal_noFKAndUk to SyntheticColumnEntityData(
                  entity = EntityEnum.Deal,
                  outEntity = EntityEnum.NoFKAndUk,
                  simpleColumnName = SimpleColumnName(&quot;noFKAndUk&quot;),
                  isOptional = false,
                  comment = &quot;Параметр сделки, отношение к сделке один к одному&quot;,
                  iColExtractFunction = SyntheticSet&lt;DealEntity, DealDetail,
                      NoFKAndUkEntity&gt;{it.noFKAndUk},
                  ),
                  Deal_optionalDealParam to SyntheticColumnEntityData(
                  entity = EntityEnum.Deal,
                  outEntity = EntityEnum.OptionalDealParam,
                  simpleColumnName = SimpleColumnName(&quot;optionalDealParam&quot;),
                  isOptional = true,
                  comment = &quot;Параметр сделки, отношение к сделке один к одному, опциональный&quot;,
                  iColExtractFunction = Synthetic&lt;DealEntity, DealDetail,
                      OptionalDealParamEntity&gt;{it.optionalDealParam?.let{q-&gt;setOf(q)}?:setOf()},
                  ),
                  Deal_oneOfDto to SyntheticColumnEntityData(
                  entity = EntityEnum.Deal,
                  outEntity = EntityEnum.OneOfDto,
                  simpleColumnName = SimpleColumnName(&quot;oneOfDto&quot;),
                  isOptional = false,
                  comment = &quot;Параметр сделки, отношение к сделке один к одному&quot;,
                  iColExtractFunction = Synthetic&lt;DealEntity, DealDetail, OneOfDtoEntity&gt;
                      {setOf(it.oneOfDto)},
                  ),
                  DealOneData_dealId to SimpleColumnEntityData(
                      entity = EntityEnum.DealOneData,
                      simpleColumnName = SimpleColumnName(&quot;dealId&quot;),
                      isOptional = false,
                      comment = &quot;Это ее идентификатор&quot;,
                      iColExtractFunction = SimpleColExtractFunction&lt;DealOneData, DealId&gt; {
                          it.dealId },
                      simpleColumnType =
                          SimpleColumnType(&quot;ru.vood.dmgen.datamodel.valueClasses.DealId&quot;)),
                  DealOneData_one to SimpleColumnEntityData(
                      entity = EntityEnum.DealOneData,
                      simpleColumnName = SimpleColumnName(&quot;one&quot;),
                      isOptional = false,
                      comment = &quot;Параметр сделки, отношение к сделке один к одному&quot;,
                      iColExtractFunction = SimpleColExtractFunction&lt;DealOneData, String&gt; { it.one
                          },
                      simpleColumnType = SimpleColumnType(&quot;kotlin.String&quot;)),
                  DealParamaggregate_dealId to SimpleColumnEntityData(
                      entity = EntityEnum.DealParamaggregate,
                      simpleColumnName = SimpleColumnName(&quot;dealId&quot;),
                      isOptional = false,
                      comment = &quot;Идентификатор сделки&quot;,
                      iColExtractFunction = SimpleColExtractFunction&lt;DealParamaggregate, DealId&gt; {
                          it.dealId },
                      simpleColumnType =
                          SimpleColumnType(&quot;ru.vood.dmgen.datamodel.valueClasses.DealId&quot;)),
                  DealTwoData_dealId to SimpleColumnEntityData(
                      entity = EntityEnum.DealTwoData,
                      simpleColumnName = SimpleColumnName(&quot;dealId&quot;),
                      isOptional = false,
                      comment = &quot;Это ее идентификатор&quot;,
                      iColExtractFunction = SimpleColExtractFunction&lt;DealTwoData, DealId&gt; {
                          it.dealId },
                      simpleColumnType =
                          SimpleColumnType(&quot;ru.vood.dmgen.datamodel.valueClasses.DealId&quot;)),
                  DealTwoData_two to SimpleColumnEntityData(
                      entity = EntityEnum.DealTwoData,
                      simpleColumnName = SimpleColumnName(&quot;two&quot;),
                      isOptional = true,
                      comment = &quot;Параметр сделки, отношение к сделке один к одному&quot;,
                      iColExtractFunction = SimpleColExtractFunction&lt;DealTwoData, String&gt; { it.two
                          },
                      simpleColumnType = SimpleColumnType(&quot;kotlin.String&quot;)),
                  NoFKAndUk_dealId to SimpleColumnEntityData(
                      entity = EntityEnum.NoFKAndUk,
                      simpleColumnName = SimpleColumnName(&quot;dealId&quot;),
                      isOptional = false,
                      comment = &quot;Параметр сделки, отношение к сделке один к одному&quot;,
                      iColExtractFunction = SimpleColExtractFunction&lt;NoFKAndUk, DealId&gt; { it.dealId
                          },
                      simpleColumnType =
                          SimpleColumnType(&quot;ru.vood.dmgen.datamodel.valueClasses.DealId&quot;)),
                  OneOfDto_dealId to SimpleColumnEntityData(
                      entity = EntityEnum.OneOfDto,
                      simpleColumnName = SimpleColumnName(&quot;dealId&quot;),
                      isOptional = false,
                      comment = &quot;Параметр сделки, отношение к сделке один к одному&quot;,
                      iColExtractFunction = SimpleColExtractFunction&lt;OneOfDto, DealId&gt; { it.dealId
                          },
                      simpleColumnType =
                          SimpleColumnType(&quot;ru.vood.dmgen.datamodel.valueClasses.DealId&quot;)),
                  OptionalDealParam_dealId to SimpleColumnEntityData(
                      entity = EntityEnum.OptionalDealParam,
                      simpleColumnName = SimpleColumnName(&quot;dealId&quot;),
                      isOptional = false,
                      comment = &quot;Идентификатор сделки&quot;,
                      iColExtractFunction = SimpleColExtractFunction&lt;OptionalDealParam, DealId&gt; {
                          it.dealId },
                      simpleColumnType =
                          SimpleColumnType(&quot;ru.vood.dmgen.datamodel.valueClasses.DealId&quot;)),
                  OptionalDealParam_paramId to SimpleColumnEntityData(
                      entity = EntityEnum.OptionalDealParam,
                      simpleColumnName = SimpleColumnName(&quot;paramId&quot;),
                      isOptional = false,
                      comment = &quot;Идентификатор параметра&quot;,
                      iColExtractFunction = SimpleColExtractFunction&lt;OptionalDealParam, Int&gt; {
                          it.paramId },
                      simpleColumnType = SimpleColumnType(&quot;kotlin.Int&quot;)),
                  )
                  )

                }
              }
&gt;
	at app//org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at app//org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at app//org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at app//org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)
	at app//org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)
	at app//org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1142)
	at app//ru.vood.processor.datamodel.abstraction.AbstractGeneratorTest.compareTextFile(AbstractGeneratorTest.kt:40)
	at app//ru.vood.processor.datamodel.generator.meta.ColumnEntityMapGeneratorTest.textFileTest(ColumnEntityMapGeneratorTest.kt:35)
	at java.base@21.0.4/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base@21.0.4/java.lang.reflect.Method.invoke(Method.java:580)
	at app//org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)
	at app//org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestTemplateMethod(TimeoutExtension.java:94)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:226)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:204)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:142)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:110)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base@21.0.4/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base@21.0.4/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base@21.0.4/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base@21.0.4/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:110)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:44)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@21.0.4/java.util.ArrayList.forEach(ArrayList.java:1596)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@21.0.4/java.util.ArrayList.forEach(ArrayList.java:1596)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at app//org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at app//org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at app//org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:124)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:99)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:94)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:63)
	at java.base@21.0.4/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base@21.0.4/java.lang.reflect.Method.invoke(Method.java:580)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:92)
	at jdk.proxy1/jdk.proxy1.$Proxy4.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:200)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:132)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:103)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:63)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:121)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
</failure>
  </testcase>
  <system-out><![CDATA[]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
