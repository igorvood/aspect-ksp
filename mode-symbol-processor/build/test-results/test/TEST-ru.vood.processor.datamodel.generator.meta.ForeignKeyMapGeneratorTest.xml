<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="ru.vood.processor.datamodel.generator.meta.ForeignKeyMapGeneratorTest" tests="2" skipped="0" failures="1" errors="0" timestamp="2025-08-25T13:39:56.487Z" hostname="vood" time="0.007">
  <properties/>
  <testcase name="compareTestedFiles()" classname="ru.vood.processor.datamodel.generator.meta.ForeignKeyMapGeneratorTest" time="0.001"/>
  <testcase name="[1] TestCase(expectedClassFile=FkNameEnum)" classname="ru.vood.processor.datamodel.generator.meta.ForeignKeyMapGeneratorTest" time="0.005">
    <failure message="org.opentest4j.AssertionFailedError: expected: &lt;package test.metaEnum&#10;&#10;import java.util.EnumMap&#10;import javax.`annotation`.processing.Generated&#10;import kotlin.collections.Set&#10;import ru.vood.dmgen.`annotation`.MetaFKs&#10;import ru.vood.dmgen.datamodel.sealedData.DealParamaggregateEntity&#10;import ru.vood.dmgen.datamodel.sealedData.Deal_PKContext&#10;import ru.vood.dmgen.datamodel.sealedData.NoFKAndUkEntity&#10;import ru.vood.dmgen.datamodel.sealedData.OptionalDealParamEntity&#10;import ru.vood.dmgen.datamodel.sealedData.intf.FKMetaData&#10;import ru.vood.dmgen.datamodel.sealedData.intf.FkPair&#10;import ru.vood.dmgen.datamodel.sealedData.intf.IEntityOrigin&#10;import ru.vood.dmgen.datamodel.sealedData.metaEnum.EntityEnum&#10;import ru.vood.dmgen.datamodel.sealedData.metaEnum.FullColumnNameEnum&#10;import ru.vood.dmgen.datamodel.sealedData.metaEnum.UniqueKeyEnum&#10;import ru.vood.dmgen.datamodel.sealedData.oneOf.DealOneDataEntity&#10;import ru.vood.dmgen.datamodel.sealedData.oneOf.DealTwoDataEntity&#10;import ru.vood.dmgen.datamodel.sealedData.oneOf.OneOfDtoEntity&#10;import ru.vood.dmgen.datamodel.sealedData.oneOf.OneOfDto_PKContext&#10;import ru.vood.dmgen.dto.RelationType&#10;&#10;@Generated(value = [&quot;ru.vood.processor.datamodel.generator.meta.ForeignKeyMapGenerator&quot;])&#10;@MetaFKs&#10;public enum class FkNameEnum {&#10;  DealParamaggregate_FK,&#10;  NoFKAndUk_FK,&#10;  OptionalDealParam_FK,&#10;  OneOfDto_FK,&#10;  DealOneData_FK,&#10;  DealTwoData_FK,&#10;  ;&#10;&#10;  public fun fkData(): FKMetaData&lt;out IEntityOrigin&gt; = foreignKeyMap[this]!!&#10;&#10;  public companion object {&#10;    public val foreignKeyMap:&#10;        EnumMap&lt;ru.vood.dmgen.datamodel.sealedData.metaEnum.FkNameEnum, FKMetaData&lt;out IEntityOrigin&gt;&gt;&#10;        = EnumMap(&#10;          mapOf(&#10;                DealParamaggregate_FK to FKMetaData(&#10;                  fromEntity = EntityEnum.DealParamaggregate,&#10;                  toEntity = EntityEnum.Deal,&#10;                  ukTo = UniqueKeyEnum.Deal_PK,&#10;                  ukFrom = UniqueKeyEnum.DealParamaggregate_PK,&#10;                  relationType = RelationType.ONE_TO_ONE_OPTIONAL,&#10;                  fkCols = setOf(&#10;                  FkPair(FullColumnNameEnum.DealParamaggregate_dealId, FullColumnNameEnum.Deal_id),&#10;                  ),&#10;                  сontextExtractor = {data: DealParamaggregateEntity -&gt; Deal_PKContext(&#10;                  data.dealId,&#10;                  ) }&#10;                  ),&#10;                NoFKAndUk_FK to FKMetaData(&#10;                  fromEntity = EntityEnum.NoFKAndUk,&#10;                  toEntity = EntityEnum.Deal,&#10;                  ukTo = UniqueKeyEnum.Deal_PK,&#10;                  ukFrom = null,&#10;                  relationType = RelationType.MANY_TO_ONE,&#10;                  fkCols = setOf(&#10;                  FkPair(FullColumnNameEnum.NoFKAndUk_dealId, FullColumnNameEnum.Deal_id),&#10;                  ),&#10;                  сontextExtractor = {data: NoFKAndUkEntity -&gt; Deal_PKContext(&#10;                  data.dealId,&#10;                  ) }&#10;                  ),&#10;                OptionalDealParam_FK to FKMetaData(&#10;                  fromEntity = EntityEnum.OptionalDealParam,&#10;                  toEntity = EntityEnum.Deal,&#10;                  ukTo = UniqueKeyEnum.Deal_PK,&#10;                  ukFrom = UniqueKeyEnum.OptionalDealParam_PK,&#10;                  relationType = RelationType.ONE_TO_ONE_OPTIONAL,&#10;                  fkCols = setOf(&#10;                  FkPair(FullColumnNameEnum.OptionalDealParam_dealId, FullColumnNameEnum.Deal_id),&#10;                  ),&#10;                  сontextExtractor = {data: OptionalDealParamEntity -&gt; Deal_PKContext(&#10;                  data.dealId,&#10;                  ) }&#10;                  ),&#10;                DealOneData_FK to FKMetaData(&#10;                  fromEntity = EntityEnum.DealOneData,&#10;                  toEntity = EntityEnum.OneOfDto,&#10;                  ukTo = UniqueKeyEnum.OneOfDto_PK,&#10;                  ukFrom = UniqueKeyEnum.DealOneData_PK,&#10;                  relationType = RelationType.ONE_TO_ONE_MANDATORY,&#10;                  fkCols = setOf(&#10;                  FkPair(FullColumnNameEnum.DealOneData_dealId, FullColumnNameEnum.OneOfDto_dealId),&#10;                  ),&#10;                  сontextExtractor = {data: DealOneDataEntity -&gt; OneOfDto_PKContext(&#10;                  data.dealId,&#10;                  ) }&#10;                  ),&#10;                DealTwoData_FK to FKMetaData(&#10;                  fromEntity = EntityEnum.DealTwoData,&#10;                  toEntity = EntityEnum.OneOfDto,&#10;                  ukTo = UniqueKeyEnum.OneOfDto_PK,&#10;                  ukFrom = UniqueKeyEnum.DealTwoData_PK,&#10;                  relationType = RelationType.ONE_TO_ONE_MANDATORY,&#10;                  fkCols = setOf(&#10;                  FkPair(FullColumnNameEnum.DealTwoData_dealId, FullColumnNameEnum.OneOfDto_dealId),&#10;                  ),&#10;                  сontextExtractor = {data: DealTwoDataEntity -&gt; OneOfDto_PKContext(&#10;                  data.dealId,&#10;                  ) }&#10;                  ),&#10;                OneOfDto_FK to FKMetaData(&#10;                  fromEntity = EntityEnum.OneOfDto,&#10;                  toEntity = EntityEnum.Deal,&#10;                  ukTo = UniqueKeyEnum.Deal_PK,&#10;                  ukFrom = UniqueKeyEnum.OneOfDto_PK,&#10;                  relationType = RelationType.ONE_TO_ONE_MANDATORY,&#10;                  fkCols = setOf(&#10;                  FkPair(FullColumnNameEnum.OneOfDto_dealId, FullColumnNameEnum.Deal_id),&#10;                  ),&#10;                  сontextExtractor = {data: OneOfDtoEntity -&gt; Deal_PKContext(&#10;                  data.dealId,&#10;                  ) }&#10;                  ),&#10;                )&#10;                )&#10;&#10;&#10;    /**&#10;     * В качестве ключа первой мапки выступает идентификатор сущности от которой идет FK. В качестве&#10;     * ключа второй, вложенной мапки, выступает идентификатор сущности в которую идет FK&#10;     */&#10;    public val fromToFkMap: EnumMap&lt;EntityEnum, EnumMap&lt;EntityEnum, FKMetaData&lt;out IEntityOrigin&gt;&gt;&gt;&#10;        = EnumMap(&#10;    foreignKeyMap.values&#10;                            .map { fk -&gt;&#10;                                fk.fromEntity to EnumMap(foreignKeyMap.values&#10;                                    .filter { it.fromEntity == fk.fromEntity }&#10;                                    .map { fk2 -&gt; fk2.toEntity to fk2 }.toMap())&#10;                            }.toMap()&#10;    )&#10;&#10;&#10;    public val foreignKeyMapFromEntity: EnumMap&lt;EntityEnum, Set&lt;FKMetaData&lt;out IEntityOrigin&gt;&gt;&gt; =&#10;        EnumMap(&#10;    foreignKeyMap.values&#10;                .map {fkMetaData-&gt;&#10;                    fkMetaData.fromEntity to fkMetaData&#10;                }&#10;                .groupBy { it.first }&#10;                .map { it.key to it.value.map { q -&gt; q.second }.toSet() }&#10;                .toMap()&#10;    )&#10;&#10;&#10;    public fun getFk(fromEntity: EntityEnum, toEntity: EntityEnum) = (fromToFkMap[fromEntity] ?:&#10;    error(&quot;&quot;&quot;Not found any foreign key from entity $fromEntity&quot;&quot;&quot;))[toEntity]?:&#10;    error(&quot;&quot;&quot;Not found any foreign key from entity $fromEntity to entity $toEntity&quot;&quot;&quot;)&#10;  }&#10;}&#10;&gt; but was: &lt;package test.metaEnum&#10;&#10;import java.util.EnumMap&#10;import javax.`annotation`.processing.Generated&#10;import kotlin.collections.Set&#10;import ru.vood.dmgen.`annotation`.MetaFKs&#10;import ru.vood.dmgen.datamodel.sealedData.DealParamaggregateEntity&#10;import ru.vood.dmgen.datamodel.sealedData.Deal_PKContext&#10;import ru.vood.dmgen.datamodel.sealedData.NoFKAndUkEntity&#10;import ru.vood.dmgen.datamodel.sealedData.OptionalDealParamEntity&#10;import ru.vood.dmgen.datamodel.sealedData.oneOf.DealOneDataEntity&#10;import ru.vood.dmgen.datamodel.sealedData.oneOf.DealTwoDataEntity&#10;import ru.vood.dmgen.datamodel.sealedData.oneOf.OneOfDtoEntity&#10;import ru.vood.dmgen.datamodel.sealedData.oneOf.OneOfDto_PKContext&#10;import ru.vood.dmgen.dto.RelationType&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.FKMetaData&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.FkPair&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.IEntityOrigin&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.metaEnum.EntityEnum&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.metaEnum.FullColumnNameEnum&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.metaEnum.UniqueKeyEnum&#10;&#10;@Generated(value = [&quot;ru.vood.processor.datamodel.generator.meta.ForeignKeyMapGenerator&quot;])&#10;@MetaFKs&#10;public enum class FkNameEnum {&#10;  DealParamaggregate_FK,&#10;  NoFKAndUk_FK,&#10;  OptionalDealParam_FK,&#10;  OneOfDto_FK,&#10;  DealOneData_FK,&#10;  DealTwoData_FK,&#10;  ;&#10;&#10;  public fun fkData(): FKMetaData&lt;out IEntityOrigin&gt; = foreignKeyMap[this]!!&#10;&#10;  public companion object {&#10;    public val foreignKeyMap:&#10;        EnumMap&lt;ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.metaEnum.FkNameEnum, FKMetaData&lt;out IEntityOrigin&gt;&gt;&#10;        = EnumMap(&#10;          mapOf(&#10;                DealParamaggregate_FK to FKMetaData(&#10;                  fromEntity = EntityEnum.DealParamaggregate,&#10;                  toEntity = EntityEnum.Deal,&#10;                  ukTo = UniqueKeyEnum.Deal_PK,&#10;                  ukFrom = UniqueKeyEnum.DealParamaggregate_PK,&#10;                  relationType = RelationType.ONE_TO_ONE_OPTIONAL,&#10;                  fkCols = setOf(&#10;                  FkPair(FullColumnNameEnum.DealParamaggregate_dealId, FullColumnNameEnum.Deal_id),&#10;                  ),&#10;                  сontextExtractor = {data: DealParamaggregateEntity -&gt; Deal_PKContext(&#10;                  data.dealId,&#10;                  ) }&#10;                  ),&#10;                NoFKAndUk_FK to FKMetaData(&#10;                  fromEntity = EntityEnum.NoFKAndUk,&#10;                  toEntity = EntityEnum.Deal,&#10;                  ukTo = UniqueKeyEnum.Deal_PK,&#10;                  ukFrom = null,&#10;                  relationType = RelationType.MANY_TO_ONE,&#10;                  fkCols = setOf(&#10;                  FkPair(FullColumnNameEnum.NoFKAndUk_dealId, FullColumnNameEnum.Deal_id),&#10;                  ),&#10;                  сontextExtractor = {data: NoFKAndUkEntity -&gt; Deal_PKContext(&#10;                  data.dealId,&#10;                  ) }&#10;                  ),&#10;                OptionalDealParam_FK to FKMetaData(&#10;                  fromEntity = EntityEnum.OptionalDealParam,&#10;                  toEntity = EntityEnum.Deal,&#10;                  ukTo = UniqueKeyEnum.Deal_PK,&#10;                  ukFrom = UniqueKeyEnum.OptionalDealParam_PK,&#10;                  relationType = RelationType.ONE_TO_ONE_OPTIONAL,&#10;                  fkCols = setOf(&#10;                  FkPair(FullColumnNameEnum.OptionalDealParam_dealId, FullColumnNameEnum.Deal_id),&#10;                  ),&#10;                  сontextExtractor = {data: OptionalDealParamEntity -&gt; Deal_PKContext(&#10;                  data.dealId,&#10;                  ) }&#10;                  ),&#10;                DealOneData_FK to FKMetaData(&#10;                  fromEntity = EntityEnum.DealOneData,&#10;                  toEntity = EntityEnum.OneOfDto,&#10;                  ukTo = UniqueKeyEnum.OneOfDto_PK,&#10;                  ukFrom = UniqueKeyEnum.DealOneData_PK,&#10;                  relationType = RelationType.ONE_TO_ONE_MANDATORY,&#10;                  fkCols = setOf(&#10;                  FkPair(FullColumnNameEnum.DealOneData_dealId, FullColumnNameEnum.OneOfDto_dealId),&#10;                  ),&#10;                  сontextExtractor = {data: DealOneDataEntity -&gt; OneOfDto_PKContext(&#10;                  data.dealId,&#10;                  ) }&#10;                  ),&#10;                DealTwoData_FK to FKMetaData(&#10;                  fromEntity = EntityEnum.DealTwoData,&#10;                  toEntity = EntityEnum.OneOfDto,&#10;                  ukTo = UniqueKeyEnum.OneOfDto_PK,&#10;                  ukFrom = UniqueKeyEnum.DealTwoData_PK,&#10;                  relationType = RelationType.ONE_TO_ONE_MANDATORY,&#10;                  fkCols = setOf(&#10;                  FkPair(FullColumnNameEnum.DealTwoData_dealId, FullColumnNameEnum.OneOfDto_dealId),&#10;                  ),&#10;                  сontextExtractor = {data: DealTwoDataEntity -&gt; OneOfDto_PKContext(&#10;                  data.dealId,&#10;                  ) }&#10;                  ),&#10;                OneOfDto_FK to FKMetaData(&#10;                  fromEntity = EntityEnum.OneOfDto,&#10;                  toEntity = EntityEnum.Deal,&#10;                  ukTo = UniqueKeyEnum.Deal_PK,&#10;                  ukFrom = UniqueKeyEnum.OneOfDto_PK,&#10;                  relationType = RelationType.ONE_TO_ONE_MANDATORY,&#10;                  fkCols = setOf(&#10;                  FkPair(FullColumnNameEnum.OneOfDto_dealId, FullColumnNameEnum.Deal_id),&#10;                  ),&#10;                  сontextExtractor = {data: OneOfDtoEntity -&gt; Deal_PKContext(&#10;                  data.dealId,&#10;                  ) }&#10;                  ),&#10;                )&#10;                )&#10;&#10;&#10;    /**&#10;     * В качестве ключа первой мапки выступает идентификатор сущности от которой идет FK. В качестве&#10;     * ключа второй, вложенной мапки, выступает идентификатор сущности в которую идет FK&#10;     */&#10;    public val fromToFkMap: EnumMap&lt;EntityEnum, EnumMap&lt;EntityEnum, FKMetaData&lt;out IEntityOrigin&gt;&gt;&gt;&#10;        = EnumMap(&#10;    foreignKeyMap.values&#10;                            .map { fk -&gt;&#10;                                fk.fromEntity to EnumMap(foreignKeyMap.values&#10;                                    .filter { it.fromEntity == fk.fromEntity }&#10;                                    .map { fk2 -&gt; fk2.toEntity to fk2 }.toMap())&#10;                            }.toMap()&#10;    )&#10;&#10;&#10;    public val foreignKeyMapFromEntity: EnumMap&lt;EntityEnum, Set&lt;FKMetaData&lt;out IEntityOrigin&gt;&gt;&gt; =&#10;        EnumMap(&#10;    foreignKeyMap.values&#10;                .map {fkMetaData-&gt;&#10;                    fkMetaData.fromEntity to fkMetaData&#10;                }&#10;                .groupBy { it.first }&#10;                .map { it.key to it.value.map { q -&gt; q.second }.toSet() }&#10;                .toMap()&#10;    )&#10;&#10;&#10;    public fun getFk(fromEntity: EntityEnum, toEntity: EntityEnum) = (fromToFkMap[fromEntity] ?:&#10;    error(&quot;&quot;&quot;Not found any foreign key from entity $fromEntity&quot;&quot;&quot;))[toEntity]?:&#10;    error(&quot;&quot;&quot;Not found any foreign key from entity $fromEntity to entity $toEntity&quot;&quot;&quot;)&#10;  }&#10;}&#10;&gt;" type="org.opentest4j.AssertionFailedError">org.opentest4j.AssertionFailedError: expected: &lt;package test.metaEnum

import java.util.EnumMap
import javax.`annotation`.processing.Generated
import kotlin.collections.Set
import ru.vood.dmgen.`annotation`.MetaFKs
import ru.vood.dmgen.datamodel.sealedData.DealParamaggregateEntity
import ru.vood.dmgen.datamodel.sealedData.Deal_PKContext
import ru.vood.dmgen.datamodel.sealedData.NoFKAndUkEntity
import ru.vood.dmgen.datamodel.sealedData.OptionalDealParamEntity
import ru.vood.dmgen.datamodel.sealedData.intf.FKMetaData
import ru.vood.dmgen.datamodel.sealedData.intf.FkPair
import ru.vood.dmgen.datamodel.sealedData.intf.IEntityOrigin
import ru.vood.dmgen.datamodel.sealedData.metaEnum.EntityEnum
import ru.vood.dmgen.datamodel.sealedData.metaEnum.FullColumnNameEnum
import ru.vood.dmgen.datamodel.sealedData.metaEnum.UniqueKeyEnum
import ru.vood.dmgen.datamodel.sealedData.oneOf.DealOneDataEntity
import ru.vood.dmgen.datamodel.sealedData.oneOf.DealTwoDataEntity
import ru.vood.dmgen.datamodel.sealedData.oneOf.OneOfDtoEntity
import ru.vood.dmgen.datamodel.sealedData.oneOf.OneOfDto_PKContext
import ru.vood.dmgen.dto.RelationType

@Generated(value = [&quot;ru.vood.processor.datamodel.generator.meta.ForeignKeyMapGenerator&quot;])
@MetaFKs
public enum class FkNameEnum {
  DealParamaggregate_FK,
  NoFKAndUk_FK,
  OptionalDealParam_FK,
  OneOfDto_FK,
  DealOneData_FK,
  DealTwoData_FK,
  ;

  public fun fkData(): FKMetaData&lt;out IEntityOrigin&gt; = foreignKeyMap[this]!!

  public companion object {
    public val foreignKeyMap:
        EnumMap&lt;ru.vood.dmgen.datamodel.sealedData.metaEnum.FkNameEnum, FKMetaData&lt;out IEntityOrigin&gt;&gt;
        = EnumMap(
          mapOf(
                DealParamaggregate_FK to FKMetaData(
                  fromEntity = EntityEnum.DealParamaggregate,
                  toEntity = EntityEnum.Deal,
                  ukTo = UniqueKeyEnum.Deal_PK,
                  ukFrom = UniqueKeyEnum.DealParamaggregate_PK,
                  relationType = RelationType.ONE_TO_ONE_OPTIONAL,
                  fkCols = setOf(
                  FkPair(FullColumnNameEnum.DealParamaggregate_dealId, FullColumnNameEnum.Deal_id),
                  ),
                  сontextExtractor = {data: DealParamaggregateEntity -&gt; Deal_PKContext(
                  data.dealId,
                  ) }
                  ),
                NoFKAndUk_FK to FKMetaData(
                  fromEntity = EntityEnum.NoFKAndUk,
                  toEntity = EntityEnum.Deal,
                  ukTo = UniqueKeyEnum.Deal_PK,
                  ukFrom = null,
                  relationType = RelationType.MANY_TO_ONE,
                  fkCols = setOf(
                  FkPair(FullColumnNameEnum.NoFKAndUk_dealId, FullColumnNameEnum.Deal_id),
                  ),
                  сontextExtractor = {data: NoFKAndUkEntity -&gt; Deal_PKContext(
                  data.dealId,
                  ) }
                  ),
                OptionalDealParam_FK to FKMetaData(
                  fromEntity = EntityEnum.OptionalDealParam,
                  toEntity = EntityEnum.Deal,
                  ukTo = UniqueKeyEnum.Deal_PK,
                  ukFrom = UniqueKeyEnum.OptionalDealParam_PK,
                  relationType = RelationType.ONE_TO_ONE_OPTIONAL,
                  fkCols = setOf(
                  FkPair(FullColumnNameEnum.OptionalDealParam_dealId, FullColumnNameEnum.Deal_id),
                  ),
                  сontextExtractor = {data: OptionalDealParamEntity -&gt; Deal_PKContext(
                  data.dealId,
                  ) }
                  ),
                DealOneData_FK to FKMetaData(
                  fromEntity = EntityEnum.DealOneData,
                  toEntity = EntityEnum.OneOfDto,
                  ukTo = UniqueKeyEnum.OneOfDto_PK,
                  ukFrom = UniqueKeyEnum.DealOneData_PK,
                  relationType = RelationType.ONE_TO_ONE_MANDATORY,
                  fkCols = setOf(
                  FkPair(FullColumnNameEnum.DealOneData_dealId, FullColumnNameEnum.OneOfDto_dealId),
                  ),
                  сontextExtractor = {data: DealOneDataEntity -&gt; OneOfDto_PKContext(
                  data.dealId,
                  ) }
                  ),
                DealTwoData_FK to FKMetaData(
                  fromEntity = EntityEnum.DealTwoData,
                  toEntity = EntityEnum.OneOfDto,
                  ukTo = UniqueKeyEnum.OneOfDto_PK,
                  ukFrom = UniqueKeyEnum.DealTwoData_PK,
                  relationType = RelationType.ONE_TO_ONE_MANDATORY,
                  fkCols = setOf(
                  FkPair(FullColumnNameEnum.DealTwoData_dealId, FullColumnNameEnum.OneOfDto_dealId),
                  ),
                  сontextExtractor = {data: DealTwoDataEntity -&gt; OneOfDto_PKContext(
                  data.dealId,
                  ) }
                  ),
                OneOfDto_FK to FKMetaData(
                  fromEntity = EntityEnum.OneOfDto,
                  toEntity = EntityEnum.Deal,
                  ukTo = UniqueKeyEnum.Deal_PK,
                  ukFrom = UniqueKeyEnum.OneOfDto_PK,
                  relationType = RelationType.ONE_TO_ONE_MANDATORY,
                  fkCols = setOf(
                  FkPair(FullColumnNameEnum.OneOfDto_dealId, FullColumnNameEnum.Deal_id),
                  ),
                  сontextExtractor = {data: OneOfDtoEntity -&gt; Deal_PKContext(
                  data.dealId,
                  ) }
                  ),
                )
                )


    /**
     * В качестве ключа первой мапки выступает идентификатор сущности от которой идет FK. В качестве
     * ключа второй, вложенной мапки, выступает идентификатор сущности в которую идет FK
     */
    public val fromToFkMap: EnumMap&lt;EntityEnum, EnumMap&lt;EntityEnum, FKMetaData&lt;out IEntityOrigin&gt;&gt;&gt;
        = EnumMap(
    foreignKeyMap.values
                            .map { fk -&gt;
                                fk.fromEntity to EnumMap(foreignKeyMap.values
                                    .filter { it.fromEntity == fk.fromEntity }
                                    .map { fk2 -&gt; fk2.toEntity to fk2 }.toMap())
                            }.toMap()
    )


    public val foreignKeyMapFromEntity: EnumMap&lt;EntityEnum, Set&lt;FKMetaData&lt;out IEntityOrigin&gt;&gt;&gt; =
        EnumMap(
    foreignKeyMap.values
                .map {fkMetaData-&gt;
                    fkMetaData.fromEntity to fkMetaData
                }
                .groupBy { it.first }
                .map { it.key to it.value.map { q -&gt; q.second }.toSet() }
                .toMap()
    )


    public fun getFk(fromEntity: EntityEnum, toEntity: EntityEnum) = (fromToFkMap[fromEntity] ?:
    error(&quot;&quot;&quot;Not found any foreign key from entity $fromEntity&quot;&quot;&quot;))[toEntity]?:
    error(&quot;&quot;&quot;Not found any foreign key from entity $fromEntity to entity $toEntity&quot;&quot;&quot;)
  }
}
&gt; but was: &lt;package test.metaEnum

import java.util.EnumMap
import javax.`annotation`.processing.Generated
import kotlin.collections.Set
import ru.vood.dmgen.`annotation`.MetaFKs
import ru.vood.dmgen.datamodel.sealedData.DealParamaggregateEntity
import ru.vood.dmgen.datamodel.sealedData.Deal_PKContext
import ru.vood.dmgen.datamodel.sealedData.NoFKAndUkEntity
import ru.vood.dmgen.datamodel.sealedData.OptionalDealParamEntity
import ru.vood.dmgen.datamodel.sealedData.oneOf.DealOneDataEntity
import ru.vood.dmgen.datamodel.sealedData.oneOf.DealTwoDataEntity
import ru.vood.dmgen.datamodel.sealedData.oneOf.OneOfDtoEntity
import ru.vood.dmgen.datamodel.sealedData.oneOf.OneOfDto_PKContext
import ru.vood.dmgen.dto.RelationType
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.FKMetaData
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.FkPair
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.IEntityOrigin
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.metaEnum.EntityEnum
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.metaEnum.FullColumnNameEnum
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.metaEnum.UniqueKeyEnum

@Generated(value = [&quot;ru.vood.processor.datamodel.generator.meta.ForeignKeyMapGenerator&quot;])
@MetaFKs
public enum class FkNameEnum {
  DealParamaggregate_FK,
  NoFKAndUk_FK,
  OptionalDealParam_FK,
  OneOfDto_FK,
  DealOneData_FK,
  DealTwoData_FK,
  ;

  public fun fkData(): FKMetaData&lt;out IEntityOrigin&gt; = foreignKeyMap[this]!!

  public companion object {
    public val foreignKeyMap:
        EnumMap&lt;ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.metaEnum.FkNameEnum, FKMetaData&lt;out IEntityOrigin&gt;&gt;
        = EnumMap(
          mapOf(
                DealParamaggregate_FK to FKMetaData(
                  fromEntity = EntityEnum.DealParamaggregate,
                  toEntity = EntityEnum.Deal,
                  ukTo = UniqueKeyEnum.Deal_PK,
                  ukFrom = UniqueKeyEnum.DealParamaggregate_PK,
                  relationType = RelationType.ONE_TO_ONE_OPTIONAL,
                  fkCols = setOf(
                  FkPair(FullColumnNameEnum.DealParamaggregate_dealId, FullColumnNameEnum.Deal_id),
                  ),
                  сontextExtractor = {data: DealParamaggregateEntity -&gt; Deal_PKContext(
                  data.dealId,
                  ) }
                  ),
                NoFKAndUk_FK to FKMetaData(
                  fromEntity = EntityEnum.NoFKAndUk,
                  toEntity = EntityEnum.Deal,
                  ukTo = UniqueKeyEnum.Deal_PK,
                  ukFrom = null,
                  relationType = RelationType.MANY_TO_ONE,
                  fkCols = setOf(
                  FkPair(FullColumnNameEnum.NoFKAndUk_dealId, FullColumnNameEnum.Deal_id),
                  ),
                  сontextExtractor = {data: NoFKAndUkEntity -&gt; Deal_PKContext(
                  data.dealId,
                  ) }
                  ),
                OptionalDealParam_FK to FKMetaData(
                  fromEntity = EntityEnum.OptionalDealParam,
                  toEntity = EntityEnum.Deal,
                  ukTo = UniqueKeyEnum.Deal_PK,
                  ukFrom = UniqueKeyEnum.OptionalDealParam_PK,
                  relationType = RelationType.ONE_TO_ONE_OPTIONAL,
                  fkCols = setOf(
                  FkPair(FullColumnNameEnum.OptionalDealParam_dealId, FullColumnNameEnum.Deal_id),
                  ),
                  сontextExtractor = {data: OptionalDealParamEntity -&gt; Deal_PKContext(
                  data.dealId,
                  ) }
                  ),
                DealOneData_FK to FKMetaData(
                  fromEntity = EntityEnum.DealOneData,
                  toEntity = EntityEnum.OneOfDto,
                  ukTo = UniqueKeyEnum.OneOfDto_PK,
                  ukFrom = UniqueKeyEnum.DealOneData_PK,
                  relationType = RelationType.ONE_TO_ONE_MANDATORY,
                  fkCols = setOf(
                  FkPair(FullColumnNameEnum.DealOneData_dealId, FullColumnNameEnum.OneOfDto_dealId),
                  ),
                  сontextExtractor = {data: DealOneDataEntity -&gt; OneOfDto_PKContext(
                  data.dealId,
                  ) }
                  ),
                DealTwoData_FK to FKMetaData(
                  fromEntity = EntityEnum.DealTwoData,
                  toEntity = EntityEnum.OneOfDto,
                  ukTo = UniqueKeyEnum.OneOfDto_PK,
                  ukFrom = UniqueKeyEnum.DealTwoData_PK,
                  relationType = RelationType.ONE_TO_ONE_MANDATORY,
                  fkCols = setOf(
                  FkPair(FullColumnNameEnum.DealTwoData_dealId, FullColumnNameEnum.OneOfDto_dealId),
                  ),
                  сontextExtractor = {data: DealTwoDataEntity -&gt; OneOfDto_PKContext(
                  data.dealId,
                  ) }
                  ),
                OneOfDto_FK to FKMetaData(
                  fromEntity = EntityEnum.OneOfDto,
                  toEntity = EntityEnum.Deal,
                  ukTo = UniqueKeyEnum.Deal_PK,
                  ukFrom = UniqueKeyEnum.OneOfDto_PK,
                  relationType = RelationType.ONE_TO_ONE_MANDATORY,
                  fkCols = setOf(
                  FkPair(FullColumnNameEnum.OneOfDto_dealId, FullColumnNameEnum.Deal_id),
                  ),
                  сontextExtractor = {data: OneOfDtoEntity -&gt; Deal_PKContext(
                  data.dealId,
                  ) }
                  ),
                )
                )


    /**
     * В качестве ключа первой мапки выступает идентификатор сущности от которой идет FK. В качестве
     * ключа второй, вложенной мапки, выступает идентификатор сущности в которую идет FK
     */
    public val fromToFkMap: EnumMap&lt;EntityEnum, EnumMap&lt;EntityEnum, FKMetaData&lt;out IEntityOrigin&gt;&gt;&gt;
        = EnumMap(
    foreignKeyMap.values
                            .map { fk -&gt;
                                fk.fromEntity to EnumMap(foreignKeyMap.values
                                    .filter { it.fromEntity == fk.fromEntity }
                                    .map { fk2 -&gt; fk2.toEntity to fk2 }.toMap())
                            }.toMap()
    )


    public val foreignKeyMapFromEntity: EnumMap&lt;EntityEnum, Set&lt;FKMetaData&lt;out IEntityOrigin&gt;&gt;&gt; =
        EnumMap(
    foreignKeyMap.values
                .map {fkMetaData-&gt;
                    fkMetaData.fromEntity to fkMetaData
                }
                .groupBy { it.first }
                .map { it.key to it.value.map { q -&gt; q.second }.toSet() }
                .toMap()
    )


    public fun getFk(fromEntity: EntityEnum, toEntity: EntityEnum) = (fromToFkMap[fromEntity] ?:
    error(&quot;&quot;&quot;Not found any foreign key from entity $fromEntity&quot;&quot;&quot;))[toEntity]?:
    error(&quot;&quot;&quot;Not found any foreign key from entity $fromEntity to entity $toEntity&quot;&quot;&quot;)
  }
}
&gt;
	at app//org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at app//org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at app//org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at app//org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)
	at app//org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)
	at app//org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1142)
	at app//ru.vood.processor.datamodel.abstraction.AbstractGeneratorTest.compareTextFile(AbstractGeneratorTest.kt:40)
	at app//ru.vood.processor.datamodel.generator.meta.ForeignKeyMapGeneratorTest.textFileTest(ForeignKeyMapGeneratorTest.kt:35)
	at java.base@21.0.4/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base@21.0.4/java.lang.reflect.Method.invoke(Method.java:580)
	at app//org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)
	at app//org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestTemplateMethod(TimeoutExtension.java:94)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:226)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:204)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:142)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:110)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base@21.0.4/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base@21.0.4/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base@21.0.4/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base@21.0.4/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:110)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:44)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@21.0.4/java.util.ArrayList.forEach(ArrayList.java:1596)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@21.0.4/java.util.ArrayList.forEach(ArrayList.java:1596)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at app//org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at app//org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at app//org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:124)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:99)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:94)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:63)
	at java.base@21.0.4/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base@21.0.4/java.lang.reflect.Method.invoke(Method.java:580)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:92)
	at jdk.proxy1/jdk.proxy1.$Proxy4.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:200)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:132)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:103)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:63)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:121)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
</failure>
  </testcase>
  <system-out><![CDATA[]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
