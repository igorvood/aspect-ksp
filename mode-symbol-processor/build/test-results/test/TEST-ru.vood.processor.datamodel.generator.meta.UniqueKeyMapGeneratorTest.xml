<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="ru.vood.processor.datamodel.generator.meta.UniqueKeyMapGeneratorTest" tests="2" skipped="0" failures="1" errors="0" timestamp="2025-08-25T13:39:56.504Z" hostname="vood" time="0.005">
  <properties/>
  <testcase name="compareTestedFiles()" classname="ru.vood.processor.datamodel.generator.meta.UniqueKeyMapGeneratorTest" time="0.001"/>
  <testcase name="[1] TestCase(expectedClassFile=UniqueKeyEnum)" classname="ru.vood.processor.datamodel.generator.meta.UniqueKeyMapGeneratorTest" time="0.003">
    <failure message="org.opentest4j.AssertionFailedError: expected: &lt;package test.metaEnum&#10;&#10;import java.util.EnumMap&#10;import javax.`annotation`.processing.Generated&#10;import ru.vood.dmgen.`annotation`.MetaUKs&#10;import ru.vood.dmgen.datamodel.sealedData.DealEntity&#10;import ru.vood.dmgen.datamodel.sealedData.DealParamaggregateEntity&#10;import ru.vood.dmgen.datamodel.sealedData.DealParamaggregate_PKContext&#10;import ru.vood.dmgen.datamodel.sealedData.Deal_PKContext&#10;import ru.vood.dmgen.datamodel.sealedData.OptionalDealParamEntity&#10;import ru.vood.dmgen.datamodel.sealedData.OptionalDealParam_PKContext&#10;import ru.vood.dmgen.datamodel.sealedData.OptionalDealParam_UKContext&#10;import ru.vood.dmgen.datamodel.sealedData.intf.IEntityOrigin&#10;import ru.vood.dmgen.datamodel.sealedData.intf.UKEntityData&#10;import ru.vood.dmgen.datamodel.sealedData.metaEnum.EntityEnum&#10;import ru.vood.dmgen.datamodel.sealedData.oneOf.DealOneDataEntity&#10;import ru.vood.dmgen.datamodel.sealedData.oneOf.DealOneData_PKContext&#10;import ru.vood.dmgen.datamodel.sealedData.oneOf.DealTwoDataEntity&#10;import ru.vood.dmgen.datamodel.sealedData.oneOf.DealTwoData_PKContext&#10;import ru.vood.dmgen.datamodel.sealedData.oneOf.OneOfDtoEntity&#10;import ru.vood.dmgen.datamodel.sealedData.oneOf.OneOfDto_PKContext&#10;import ru.vood.dmgen.dto.SimpleColumnName&#10;import ru.vood.dmgen.dto.TypeUk&#10;&#10;@Generated(value = [&quot;ru.vood.processor.datamodel.generator.meta.UniqueKeyMapGenerator&quot;])&#10;@MetaUKs&#10;public enum class UniqueKeyEnum {&#10;  Deal_PK,&#10;  DealParamaggregate_PK,&#10;  OptionalDealParam_UK,&#10;  OptionalDealParam_PK,&#10;  OneOfDto_PK,&#10;  DealOneData_PK,&#10;  DealTwoData_PK,&#10;  ;&#10;&#10;  public fun ukData(): UKEntityData&lt;out IEntityOrigin&gt; = uniqueKeyMap[this]!!&#10;&#10;  public companion object {&#10;    public val uniqueKeyMap:&#10;        EnumMap&lt;ru.vood.dmgen.datamodel.sealedData.metaEnum.UniqueKeyEnum, UKEntityData&lt;out IEntityOrigin&gt;&gt;&#10;        = EnumMap(&#10;    mapOf(&#10;    Deal_PK to UKEntityData(&#10;    ukName = Deal_PK,&#10;    columns = listOf(&#10;    SimpleColumnName(&quot;id&quot;),&#10;    ),&#10;    serializer = Deal_PKContext.serializer(),&#10;    ukClass = Deal_PKContext::class,&#10;    entity = EntityEnum.Deal,&#10;    extractContext = {data: DealEntity -&gt; Deal_PKContext(&#10;    data.id,&#10;    )&#10;    },&#10;    typeUk = TypeUk.PK&#10;    ),&#10;    DealParamaggregate_PK to UKEntityData(&#10;    ukName = DealParamaggregate_PK,&#10;    columns = listOf(&#10;    SimpleColumnName(&quot;dealId&quot;),&#10;    ),&#10;    serializer = DealParamaggregate_PKContext.serializer(),&#10;    ukClass = DealParamaggregate_PKContext::class,&#10;    entity = EntityEnum.DealParamaggregate,&#10;    extractContext = {data: DealParamaggregateEntity -&gt; DealParamaggregate_PKContext(&#10;    data.dealId,&#10;    )&#10;    },&#10;    typeUk = TypeUk.PK&#10;    ),&#10;    OptionalDealParam_UK to UKEntityData(&#10;    ukName = OptionalDealParam_UK,&#10;    columns = listOf(&#10;    SimpleColumnName(&quot;paramId&quot;),&#10;    ),&#10;    serializer = OptionalDealParam_UKContext.serializer(),&#10;    ukClass = OptionalDealParam_UKContext::class,&#10;    entity = EntityEnum.OptionalDealParam,&#10;    extractContext = {data: OptionalDealParamEntity -&gt; OptionalDealParam_UKContext(&#10;    data.paramId,&#10;    )&#10;    },&#10;    typeUk = TypeUk.UK&#10;    ),&#10;    OptionalDealParam_PK to UKEntityData(&#10;    ukName = OptionalDealParam_PK,&#10;    columns = listOf(&#10;    SimpleColumnName(&quot;dealId&quot;),&#10;    ),&#10;    serializer = OptionalDealParam_PKContext.serializer(),&#10;    ukClass = OptionalDealParam_PKContext::class,&#10;    entity = EntityEnum.OptionalDealParam,&#10;    extractContext = {data: OptionalDealParamEntity -&gt; OptionalDealParam_PKContext(&#10;    data.dealId,&#10;    )&#10;    },&#10;    typeUk = TypeUk.PK&#10;    ),&#10;    OneOfDto_PK to UKEntityData(&#10;    ukName = OneOfDto_PK,&#10;    columns = listOf(&#10;    SimpleColumnName(&quot;dealId&quot;),&#10;    ),&#10;    serializer = OneOfDto_PKContext.serializer(),&#10;    ukClass = OneOfDto_PKContext::class,&#10;    entity = EntityEnum.OneOfDto,&#10;    extractContext = {data: OneOfDtoEntity -&gt; OneOfDto_PKContext(&#10;    data.dealId,&#10;    )&#10;    },&#10;    typeUk = TypeUk.PK&#10;    ),&#10;    DealOneData_PK to UKEntityData(&#10;    ukName = DealOneData_PK,&#10;    columns = listOf(&#10;    SimpleColumnName(&quot;dealId&quot;),&#10;    ),&#10;    serializer = DealOneData_PKContext.serializer(),&#10;    ukClass = DealOneData_PKContext::class,&#10;    entity = EntityEnum.DealOneData,&#10;    extractContext = {data: DealOneDataEntity -&gt; DealOneData_PKContext(&#10;    data.dealId,&#10;    )&#10;    },&#10;    typeUk = TypeUk.PK&#10;    ),&#10;    DealTwoData_PK to UKEntityData(&#10;    ukName = DealTwoData_PK,&#10;    columns = listOf(&#10;    SimpleColumnName(&quot;dealId&quot;),&#10;    ),&#10;    serializer = DealTwoData_PKContext.serializer(),&#10;    ukClass = DealTwoData_PKContext::class,&#10;    entity = EntityEnum.DealTwoData,&#10;    extractContext = {data: DealTwoDataEntity -&gt; DealTwoData_PKContext(&#10;    data.dealId,&#10;    )&#10;    },&#10;    typeUk = TypeUk.PK&#10;    ),&#10;    )&#10;    )&#10;&#10;  }&#10;}&#10;&gt; but was: &lt;package test.metaEnum&#10;&#10;import java.util.EnumMap&#10;import javax.`annotation`.processing.Generated&#10;import ru.vood.dmgen.`annotation`.MetaUKs&#10;import ru.vood.dmgen.datamodel.sealedData.DealEntity&#10;import ru.vood.dmgen.datamodel.sealedData.DealParamaggregateEntity&#10;import ru.vood.dmgen.datamodel.sealedData.DealParamaggregate_PKContext&#10;import ru.vood.dmgen.datamodel.sealedData.Deal_PKContext&#10;import ru.vood.dmgen.datamodel.sealedData.OptionalDealParamEntity&#10;import ru.vood.dmgen.datamodel.sealedData.OptionalDealParam_PKContext&#10;import ru.vood.dmgen.datamodel.sealedData.OptionalDealParam_UKContext&#10;import ru.vood.dmgen.datamodel.sealedData.oneOf.DealOneDataEntity&#10;import ru.vood.dmgen.datamodel.sealedData.oneOf.DealOneData_PKContext&#10;import ru.vood.dmgen.datamodel.sealedData.oneOf.DealTwoDataEntity&#10;import ru.vood.dmgen.datamodel.sealedData.oneOf.DealTwoData_PKContext&#10;import ru.vood.dmgen.datamodel.sealedData.oneOf.OneOfDtoEntity&#10;import ru.vood.dmgen.datamodel.sealedData.oneOf.OneOfDto_PKContext&#10;import ru.vood.dmgen.dto.SimpleColumnName&#10;import ru.vood.dmgen.dto.TypeUk&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.IEntityOrigin&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.UKEntityData&#10;import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.metaEnum.EntityEnum&#10;&#10;@Generated(value = [&quot;ru.vood.processor.datamodel.generator.meta.UniqueKeyMapGenerator&quot;])&#10;@MetaUKs&#10;public enum class UniqueKeyEnum {&#10;  Deal_PK,&#10;  DealParamaggregate_PK,&#10;  OptionalDealParam_UK,&#10;  OptionalDealParam_PK,&#10;  OneOfDto_PK,&#10;  DealOneData_PK,&#10;  DealTwoData_PK,&#10;  ;&#10;&#10;  public fun ukData(): UKEntityData&lt;out IEntityOrigin&gt; = uniqueKeyMap[this]!!&#10;&#10;  public companion object {&#10;    public val uniqueKeyMap:&#10;        EnumMap&lt;ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.metaEnum.UniqueKeyEnum, UKEntityData&lt;out IEntityOrigin&gt;&gt;&#10;        = EnumMap(&#10;    mapOf(&#10;    Deal_PK to UKEntityData(&#10;    ukName = Deal_PK,&#10;    columns = listOf(&#10;    SimpleColumnName(&quot;id&quot;),&#10;    ),&#10;    serializer = Deal_PKContext.serializer(),&#10;    ukClass = Deal_PKContext::class,&#10;    entity = EntityEnum.Deal,&#10;    extractContext = {data: DealEntity -&gt; Deal_PKContext(&#10;    data.id,&#10;    )&#10;    },&#10;    typeUk = TypeUk.PK&#10;    ),&#10;    DealParamaggregate_PK to UKEntityData(&#10;    ukName = DealParamaggregate_PK,&#10;    columns = listOf(&#10;    SimpleColumnName(&quot;dealId&quot;),&#10;    ),&#10;    serializer = DealParamaggregate_PKContext.serializer(),&#10;    ukClass = DealParamaggregate_PKContext::class,&#10;    entity = EntityEnum.DealParamaggregate,&#10;    extractContext = {data: DealParamaggregateEntity -&gt; DealParamaggregate_PKContext(&#10;    data.dealId,&#10;    )&#10;    },&#10;    typeUk = TypeUk.PK&#10;    ),&#10;    OptionalDealParam_UK to UKEntityData(&#10;    ukName = OptionalDealParam_UK,&#10;    columns = listOf(&#10;    SimpleColumnName(&quot;paramId&quot;),&#10;    ),&#10;    serializer = OptionalDealParam_UKContext.serializer(),&#10;    ukClass = OptionalDealParam_UKContext::class,&#10;    entity = EntityEnum.OptionalDealParam,&#10;    extractContext = {data: OptionalDealParamEntity -&gt; OptionalDealParam_UKContext(&#10;    data.paramId,&#10;    )&#10;    },&#10;    typeUk = TypeUk.UK&#10;    ),&#10;    OptionalDealParam_PK to UKEntityData(&#10;    ukName = OptionalDealParam_PK,&#10;    columns = listOf(&#10;    SimpleColumnName(&quot;dealId&quot;),&#10;    ),&#10;    serializer = OptionalDealParam_PKContext.serializer(),&#10;    ukClass = OptionalDealParam_PKContext::class,&#10;    entity = EntityEnum.OptionalDealParam,&#10;    extractContext = {data: OptionalDealParamEntity -&gt; OptionalDealParam_PKContext(&#10;    data.dealId,&#10;    )&#10;    },&#10;    typeUk = TypeUk.PK&#10;    ),&#10;    OneOfDto_PK to UKEntityData(&#10;    ukName = OneOfDto_PK,&#10;    columns = listOf(&#10;    SimpleColumnName(&quot;dealId&quot;),&#10;    ),&#10;    serializer = OneOfDto_PKContext.serializer(),&#10;    ukClass = OneOfDto_PKContext::class,&#10;    entity = EntityEnum.OneOfDto,&#10;    extractContext = {data: OneOfDtoEntity -&gt; OneOfDto_PKContext(&#10;    data.dealId,&#10;    )&#10;    },&#10;    typeUk = TypeUk.PK&#10;    ),&#10;    DealOneData_PK to UKEntityData(&#10;    ukName = DealOneData_PK,&#10;    columns = listOf(&#10;    SimpleColumnName(&quot;dealId&quot;),&#10;    ),&#10;    serializer = DealOneData_PKContext.serializer(),&#10;    ukClass = DealOneData_PKContext::class,&#10;    entity = EntityEnum.DealOneData,&#10;    extractContext = {data: DealOneDataEntity -&gt; DealOneData_PKContext(&#10;    data.dealId,&#10;    )&#10;    },&#10;    typeUk = TypeUk.PK&#10;    ),&#10;    DealTwoData_PK to UKEntityData(&#10;    ukName = DealTwoData_PK,&#10;    columns = listOf(&#10;    SimpleColumnName(&quot;dealId&quot;),&#10;    ),&#10;    serializer = DealTwoData_PKContext.serializer(),&#10;    ukClass = DealTwoData_PKContext::class,&#10;    entity = EntityEnum.DealTwoData,&#10;    extractContext = {data: DealTwoDataEntity -&gt; DealTwoData_PKContext(&#10;    data.dealId,&#10;    )&#10;    },&#10;    typeUk = TypeUk.PK&#10;    ),&#10;    )&#10;    )&#10;&#10;  }&#10;}&#10;&gt;" type="org.opentest4j.AssertionFailedError">org.opentest4j.AssertionFailedError: expected: &lt;package test.metaEnum

import java.util.EnumMap
import javax.`annotation`.processing.Generated
import ru.vood.dmgen.`annotation`.MetaUKs
import ru.vood.dmgen.datamodel.sealedData.DealEntity
import ru.vood.dmgen.datamodel.sealedData.DealParamaggregateEntity
import ru.vood.dmgen.datamodel.sealedData.DealParamaggregate_PKContext
import ru.vood.dmgen.datamodel.sealedData.Deal_PKContext
import ru.vood.dmgen.datamodel.sealedData.OptionalDealParamEntity
import ru.vood.dmgen.datamodel.sealedData.OptionalDealParam_PKContext
import ru.vood.dmgen.datamodel.sealedData.OptionalDealParam_UKContext
import ru.vood.dmgen.datamodel.sealedData.intf.IEntityOrigin
import ru.vood.dmgen.datamodel.sealedData.intf.UKEntityData
import ru.vood.dmgen.datamodel.sealedData.metaEnum.EntityEnum
import ru.vood.dmgen.datamodel.sealedData.oneOf.DealOneDataEntity
import ru.vood.dmgen.datamodel.sealedData.oneOf.DealOneData_PKContext
import ru.vood.dmgen.datamodel.sealedData.oneOf.DealTwoDataEntity
import ru.vood.dmgen.datamodel.sealedData.oneOf.DealTwoData_PKContext
import ru.vood.dmgen.datamodel.sealedData.oneOf.OneOfDtoEntity
import ru.vood.dmgen.datamodel.sealedData.oneOf.OneOfDto_PKContext
import ru.vood.dmgen.dto.SimpleColumnName
import ru.vood.dmgen.dto.TypeUk

@Generated(value = [&quot;ru.vood.processor.datamodel.generator.meta.UniqueKeyMapGenerator&quot;])
@MetaUKs
public enum class UniqueKeyEnum {
  Deal_PK,
  DealParamaggregate_PK,
  OptionalDealParam_UK,
  OptionalDealParam_PK,
  OneOfDto_PK,
  DealOneData_PK,
  DealTwoData_PK,
  ;

  public fun ukData(): UKEntityData&lt;out IEntityOrigin&gt; = uniqueKeyMap[this]!!

  public companion object {
    public val uniqueKeyMap:
        EnumMap&lt;ru.vood.dmgen.datamodel.sealedData.metaEnum.UniqueKeyEnum, UKEntityData&lt;out IEntityOrigin&gt;&gt;
        = EnumMap(
    mapOf(
    Deal_PK to UKEntityData(
    ukName = Deal_PK,
    columns = listOf(
    SimpleColumnName(&quot;id&quot;),
    ),
    serializer = Deal_PKContext.serializer(),
    ukClass = Deal_PKContext::class,
    entity = EntityEnum.Deal,
    extractContext = {data: DealEntity -&gt; Deal_PKContext(
    data.id,
    )
    },
    typeUk = TypeUk.PK
    ),
    DealParamaggregate_PK to UKEntityData(
    ukName = DealParamaggregate_PK,
    columns = listOf(
    SimpleColumnName(&quot;dealId&quot;),
    ),
    serializer = DealParamaggregate_PKContext.serializer(),
    ukClass = DealParamaggregate_PKContext::class,
    entity = EntityEnum.DealParamaggregate,
    extractContext = {data: DealParamaggregateEntity -&gt; DealParamaggregate_PKContext(
    data.dealId,
    )
    },
    typeUk = TypeUk.PK
    ),
    OptionalDealParam_UK to UKEntityData(
    ukName = OptionalDealParam_UK,
    columns = listOf(
    SimpleColumnName(&quot;paramId&quot;),
    ),
    serializer = OptionalDealParam_UKContext.serializer(),
    ukClass = OptionalDealParam_UKContext::class,
    entity = EntityEnum.OptionalDealParam,
    extractContext = {data: OptionalDealParamEntity -&gt; OptionalDealParam_UKContext(
    data.paramId,
    )
    },
    typeUk = TypeUk.UK
    ),
    OptionalDealParam_PK to UKEntityData(
    ukName = OptionalDealParam_PK,
    columns = listOf(
    SimpleColumnName(&quot;dealId&quot;),
    ),
    serializer = OptionalDealParam_PKContext.serializer(),
    ukClass = OptionalDealParam_PKContext::class,
    entity = EntityEnum.OptionalDealParam,
    extractContext = {data: OptionalDealParamEntity -&gt; OptionalDealParam_PKContext(
    data.dealId,
    )
    },
    typeUk = TypeUk.PK
    ),
    OneOfDto_PK to UKEntityData(
    ukName = OneOfDto_PK,
    columns = listOf(
    SimpleColumnName(&quot;dealId&quot;),
    ),
    serializer = OneOfDto_PKContext.serializer(),
    ukClass = OneOfDto_PKContext::class,
    entity = EntityEnum.OneOfDto,
    extractContext = {data: OneOfDtoEntity -&gt; OneOfDto_PKContext(
    data.dealId,
    )
    },
    typeUk = TypeUk.PK
    ),
    DealOneData_PK to UKEntityData(
    ukName = DealOneData_PK,
    columns = listOf(
    SimpleColumnName(&quot;dealId&quot;),
    ),
    serializer = DealOneData_PKContext.serializer(),
    ukClass = DealOneData_PKContext::class,
    entity = EntityEnum.DealOneData,
    extractContext = {data: DealOneDataEntity -&gt; DealOneData_PKContext(
    data.dealId,
    )
    },
    typeUk = TypeUk.PK
    ),
    DealTwoData_PK to UKEntityData(
    ukName = DealTwoData_PK,
    columns = listOf(
    SimpleColumnName(&quot;dealId&quot;),
    ),
    serializer = DealTwoData_PKContext.serializer(),
    ukClass = DealTwoData_PKContext::class,
    entity = EntityEnum.DealTwoData,
    extractContext = {data: DealTwoDataEntity -&gt; DealTwoData_PKContext(
    data.dealId,
    )
    },
    typeUk = TypeUk.PK
    ),
    )
    )

  }
}
&gt; but was: &lt;package test.metaEnum

import java.util.EnumMap
import javax.`annotation`.processing.Generated
import ru.vood.dmgen.`annotation`.MetaUKs
import ru.vood.dmgen.datamodel.sealedData.DealEntity
import ru.vood.dmgen.datamodel.sealedData.DealParamaggregateEntity
import ru.vood.dmgen.datamodel.sealedData.DealParamaggregate_PKContext
import ru.vood.dmgen.datamodel.sealedData.Deal_PKContext
import ru.vood.dmgen.datamodel.sealedData.OptionalDealParamEntity
import ru.vood.dmgen.datamodel.sealedData.OptionalDealParam_PKContext
import ru.vood.dmgen.datamodel.sealedData.OptionalDealParam_UKContext
import ru.vood.dmgen.datamodel.sealedData.oneOf.DealOneDataEntity
import ru.vood.dmgen.datamodel.sealedData.oneOf.DealOneData_PKContext
import ru.vood.dmgen.datamodel.sealedData.oneOf.DealTwoDataEntity
import ru.vood.dmgen.datamodel.sealedData.oneOf.DealTwoData_PKContext
import ru.vood.dmgen.datamodel.sealedData.oneOf.OneOfDtoEntity
import ru.vood.dmgen.datamodel.sealedData.oneOf.OneOfDto_PKContext
import ru.vood.dmgen.dto.SimpleColumnName
import ru.vood.dmgen.dto.TypeUk
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.IEntityOrigin
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.intf.UKEntityData
import ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.metaEnum.EntityEnum

@Generated(value = [&quot;ru.vood.processor.datamodel.generator.meta.UniqueKeyMapGenerator&quot;])
@MetaUKs
public enum class UniqueKeyEnum {
  Deal_PK,
  DealParamaggregate_PK,
  OptionalDealParam_UK,
  OptionalDealParam_PK,
  OneOfDto_PK,
  DealOneData_PK,
  DealTwoData_PK,
  ;

  public fun ukData(): UKEntityData&lt;out IEntityOrigin&gt; = uniqueKeyMap[this]!!

  public companion object {
    public val uniqueKeyMap:
        EnumMap&lt;ru.vood.processor.datamodel.packageForDataModelConfigProcessorProviderTest.create.metaEnum.UniqueKeyEnum, UKEntityData&lt;out IEntityOrigin&gt;&gt;
        = EnumMap(
    mapOf(
    Deal_PK to UKEntityData(
    ukName = Deal_PK,
    columns = listOf(
    SimpleColumnName(&quot;id&quot;),
    ),
    serializer = Deal_PKContext.serializer(),
    ukClass = Deal_PKContext::class,
    entity = EntityEnum.Deal,
    extractContext = {data: DealEntity -&gt; Deal_PKContext(
    data.id,
    )
    },
    typeUk = TypeUk.PK
    ),
    DealParamaggregate_PK to UKEntityData(
    ukName = DealParamaggregate_PK,
    columns = listOf(
    SimpleColumnName(&quot;dealId&quot;),
    ),
    serializer = DealParamaggregate_PKContext.serializer(),
    ukClass = DealParamaggregate_PKContext::class,
    entity = EntityEnum.DealParamaggregate,
    extractContext = {data: DealParamaggregateEntity -&gt; DealParamaggregate_PKContext(
    data.dealId,
    )
    },
    typeUk = TypeUk.PK
    ),
    OptionalDealParam_UK to UKEntityData(
    ukName = OptionalDealParam_UK,
    columns = listOf(
    SimpleColumnName(&quot;paramId&quot;),
    ),
    serializer = OptionalDealParam_UKContext.serializer(),
    ukClass = OptionalDealParam_UKContext::class,
    entity = EntityEnum.OptionalDealParam,
    extractContext = {data: OptionalDealParamEntity -&gt; OptionalDealParam_UKContext(
    data.paramId,
    )
    },
    typeUk = TypeUk.UK
    ),
    OptionalDealParam_PK to UKEntityData(
    ukName = OptionalDealParam_PK,
    columns = listOf(
    SimpleColumnName(&quot;dealId&quot;),
    ),
    serializer = OptionalDealParam_PKContext.serializer(),
    ukClass = OptionalDealParam_PKContext::class,
    entity = EntityEnum.OptionalDealParam,
    extractContext = {data: OptionalDealParamEntity -&gt; OptionalDealParam_PKContext(
    data.dealId,
    )
    },
    typeUk = TypeUk.PK
    ),
    OneOfDto_PK to UKEntityData(
    ukName = OneOfDto_PK,
    columns = listOf(
    SimpleColumnName(&quot;dealId&quot;),
    ),
    serializer = OneOfDto_PKContext.serializer(),
    ukClass = OneOfDto_PKContext::class,
    entity = EntityEnum.OneOfDto,
    extractContext = {data: OneOfDtoEntity -&gt; OneOfDto_PKContext(
    data.dealId,
    )
    },
    typeUk = TypeUk.PK
    ),
    DealOneData_PK to UKEntityData(
    ukName = DealOneData_PK,
    columns = listOf(
    SimpleColumnName(&quot;dealId&quot;),
    ),
    serializer = DealOneData_PKContext.serializer(),
    ukClass = DealOneData_PKContext::class,
    entity = EntityEnum.DealOneData,
    extractContext = {data: DealOneDataEntity -&gt; DealOneData_PKContext(
    data.dealId,
    )
    },
    typeUk = TypeUk.PK
    ),
    DealTwoData_PK to UKEntityData(
    ukName = DealTwoData_PK,
    columns = listOf(
    SimpleColumnName(&quot;dealId&quot;),
    ),
    serializer = DealTwoData_PKContext.serializer(),
    ukClass = DealTwoData_PKContext::class,
    entity = EntityEnum.DealTwoData,
    extractContext = {data: DealTwoDataEntity -&gt; DealTwoData_PKContext(
    data.dealId,
    )
    },
    typeUk = TypeUk.PK
    ),
    )
    )

  }
}
&gt;
	at app//org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at app//org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at app//org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at app//org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)
	at app//org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)
	at app//org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1142)
	at app//ru.vood.processor.datamodel.abstraction.AbstractGeneratorTest.compareTextFile(AbstractGeneratorTest.kt:40)
	at app//ru.vood.processor.datamodel.generator.meta.UniqueKeyMapGeneratorTest.textFileTest(UniqueKeyMapGeneratorTest.kt:35)
	at java.base@21.0.4/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base@21.0.4/java.lang.reflect.Method.invoke(Method.java:580)
	at app//org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)
	at app//org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestTemplateMethod(TimeoutExtension.java:94)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:226)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:204)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:142)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:110)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base@21.0.4/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@21.0.4/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base@21.0.4/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base@21.0.4/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base@21.0.4/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base@21.0.4/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base@21.0.4/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base@21.0.4/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:110)
	at app//org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:44)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@21.0.4/java.util.ArrayList.forEach(ArrayList.java:1596)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@21.0.4/java.util.ArrayList.forEach(ArrayList.java:1596)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at app//org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at app//org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at app//org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:124)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:99)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:94)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:63)
	at java.base@21.0.4/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base@21.0.4/java.lang.reflect.Method.invoke(Method.java:580)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:92)
	at jdk.proxy1/jdk.proxy1.$Proxy4.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:200)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:132)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:103)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:63)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:121)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
</failure>
  </testcase>
  <system-out><![CDATA[]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
